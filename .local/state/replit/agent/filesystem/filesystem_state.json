{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Portfolio CMS\n\n## Overview\n\nThis is a full-stack portfolio content management system built with React, Express, and PostgreSQL. The application provides a clean, modern interface for displaying portfolio content with an integrated admin panel for content management. It features a vibrant design system with custom color schemes and supports different content types including text, images, and videos.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/UI components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom color variables and design tokens\n- **State Management**: TanStack Query for server state and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Data Layer**: Drizzle ORM for type-safe database operations\n- **Storage**: In-memory storage implementation with interface for future database integration\n\n### Database Schema\nThe application uses three main tables:\n- **intro_section**: Stores introduction/hero section content with title, name, description, and profile image\n- **content_items**: Manages portfolio items with support for text, image, and video content types\n- **other_section**: Handles contact information and social media links stored as JSON\n\n### Authentication & Authorization\nCurrently uses a simple admin mode toggle without formal authentication. The system is designed to easily integrate proper authentication mechanisms.\n\n### Content Management\n- **Admin Interface**: Toggle-based admin mode with inline editing capabilities\n- **Content Types**: Support for text, image, and video content with rich metadata\n- **Real-time Updates**: Optimistic updates with automatic cache invalidation\n- **Offline Support**: Local storage backup for content persistence\n\n### Development Tools\n- **Database Migrations**: Drizzle Kit for schema management and migrations\n- **Type Safety**: Full TypeScript coverage with shared types between client and server\n- **Development Server**: Vite dev server with HMR and Express API integration\n- **Code Quality**: ESLint and TypeScript strict mode configuration\n\n## Recent Updates\n\n### Vercel Deployment Optimization (Aug 2025)\n- **Serverless Architecture**: Restructured application for Vercel's serverless functions with `/api/index.ts` entry point\n- **Build Configuration**: Created comprehensive `vercel.json` with proper routing for API endpoints and static assets\n- **Client Build Setup**: Added dedicated `client/package.json` for Vercel's static build process\n- **In-memory Storage**: Maintained MemStorage for production deployment (no external database dependencies)\n- **Deployment Documentation**: Created detailed `DEPLOYMENT_GUIDE.md` with step-by-step Vercel deployment instructions\n- **Environment Configuration**: Added `.env.example` and Vercel-specific environment variable setup\n- **Offline Capabilities**: File upload system gracefully falls back to offline mode when cloud storage unavailable\n\n### Object Storage Integration (Aug 2025)\n- **Persistent File Storage**: Implemented comprehensive object storage system with Replit's cloud storage\n- **File Upload System**: Added ObjectUploader component with drag-drop functionality and progress tracking\n- **Server-side Storage Routes**: Created full upload/download API with proper ACL policies for public access\n- **Admin Upload Integration**: Seamlessly integrated file upload into content creation modal for images and videos\n- **Content Display**: Enhanced home page to properly display uploaded images and videos from object storage\n- **Storage Persistence**: All uploaded files now survive application restarts with proper cloud storage\n\n### UI Design Consistency Fix (Aug 2025)\n- **Button Styling Standardization**: Replaced all complex gradient backgrounds with simple coral/turquoise colors\n- **Icon Container Simplification**: Changed all icon containers from gradient backgrounds to solid colors (coral, turquoise, sky, sunny)\n- **Hover Effect Consistency**: Unified hover effects across all buttons and icons - coral→turquoise transitions\n- **CSS Conflict Resolution**: Added border-0 to all buttons to prevent default border styling conflicts\n- **Complete Design Unification**: Achieved consistent light theme styling across home page, admin panel, and all modals\n\n### Section-Based Content Management (Aug 2025)\n- **Complete Content Restructure**: Removed fixed \"Nội dung của tôi\" section, now all content is managed through dynamic sections\n- **Section Item Management**: Items are correctly filtered and displayed per section with proper sectionId matching\n- **Admin Panel Enhancement**: Added edit/delete functionality for individual items within sections\n- **Default Section Protection**: Prevented deletion of default section while maintaining full item management\n- **Visual Improvements**: Added color-coded items by type and improved hover effects in admin interface\n\n### Modern Skills & Contact Design (Aug 2025)\n- **Enhanced Skills Display**: 4-column responsive grid with animated icons and hover transformations\n- **Contact Information Layout**: 3-column contact cards with icons and smooth hover animations\n- **Social Media Integration**: Redesigned social buttons with consistent styling and scale animations\n\n### Animation System Implementation (Jan 2025)\n- **Custom CSS Animations**: Added comprehensive animation keyframes including fadeInUp, slideInLeft, slideInRight, scaleIn, pulse, bounce, and shimmer effects\n- **Interactive Elements**: Enhanced all buttons, cards, and interactive components with hover animations (btn-hover-scale, btn-hover-lift, card-hover)\n- **Progressive Animations**: Implemented staggered animations with delays for content sections, custom sections, and skills\n- **Loading States**: Added shimmer effects and loading spinners for better user feedback\n- **Smooth Transitions**: Applied consistent transition timing and easing for all interactive elements\n\n### Animation Classes Available\n- `animate-fade-in-up`: Smooth entrance from bottom with fade\n- `animate-slide-in-left/right`: Directional slide animations\n- `animate-scale-in`: Scale-based entrance effect\n- `animate-pulse-custom`: Gentle pulsing for attention\n- `animate-bounce-custom`: Playful bounce effect\n- `btn-hover-scale`: Scale on hover for buttons\n- `btn-hover-lift`: Lift effect with shadow enhancement\n- `card-hover`: Transform and shadow animation for cards\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@tanstack/react-query**: Server state management and caching\n- **drizzle-orm** & **@neondatabase/serverless**: Database ORM and PostgreSQL driver\n- **express**: Backend web framework\n- **react** & **react-dom**: Frontend framework\n- **vite**: Build tool and development server\n\n### UI Component Libraries\n- **@radix-ui/***: Comprehensive set of unstyled, accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework with custom animation classes\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n### Form Handling & Validation\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: Runtime type validation\n- **drizzle-zod**: Database schema to Zod schema conversion\n\n### Development & Build Tools\n- **typescript**: Type checking and compilation\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast JavaScript bundler for production builds\n- **@replit/vite-plugin-***: Replit-specific development tools\n\n### Database & Storage\n- **connect-pg-simple**: PostgreSQL session store\n- **drizzle-kit**: Database migration and schema management tools\n\nThe application is configured to work with PostgreSQL through environment variables and uses Drizzle ORM for all database operations with automatic migration support.","size_bytes":8156},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertIntroSchema, insertContentSchema, insertOtherSchema, insertCustomSectionSchema } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { z } from \"zod\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Introduction section routes\n  app.get(\"/api/intro\", async (req, res) => {\n    try {\n      const intro = await storage.getIntroSection();\n      res.json(intro);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch introduction\" });\n    }\n  });\n\n  app.post(\"/api/intro\", async (req, res) => {\n    try {\n      const validatedData = insertIntroSchema.parse(req.body);\n      const intro = await storage.createOrUpdateIntroSection(validatedData);\n      res.json(intro);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid introduction data\", error });\n    }\n  });\n\n  // Content items routes\n  app.get(\"/api/content\", async (req, res) => {\n    try {\n      const content = await storage.getAllContentItems();\n      res.json(content);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch content items\" });\n    }\n  });\n\n  app.get(\"/api/content/:id\", async (req, res) => {\n    try {\n      const content = await storage.getContentItem(req.params.id);\n      if (!content) {\n        return res.status(404).json({ message: \"Content item not found\" });\n      }\n      res.json(content);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch content item\" });\n    }\n  });\n\n  app.post(\"/api/content\", async (req, res) => {\n    try {\n      const validatedData = insertContentSchema.parse(req.body);\n      const content = await storage.createContentItem(validatedData);\n      res.json(content);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid content data\", error });\n    }\n  });\n\n  app.put(\"/api/content/:id\", async (req, res) => {\n    try {\n      const validatedData = insertContentSchema.partial().parse(req.body);\n      const content = await storage.updateContentItem(req.params.id, validatedData);\n      res.json(content);\n    } catch (error) {\n      if (error instanceof Error && error.message === \"Content item not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Invalid content data\", error });\n    }\n  });\n\n  app.delete(\"/api/content/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteContentItem(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Content item not found\" });\n      }\n      res.json({ message: \"Content item deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete content item\" });\n    }\n  });\n\n  // Other section routes\n  app.get(\"/api/other\", async (req, res) => {\n    try {\n      const other = await storage.getOtherSection();\n      if (!other) {\n        return res.json({\n          id: randomUUID(),\n          contactInfo: {\n            email: \"hello@example.com\",\n            phone: \"+84 123 456 789\",\n            location: \"Hà Nội, Việt Nam\"\n          },\n          socialLinks: {},\n          skills: [\n            { name: \"UI/UX Design\", description: \"Thiết kế giao diện người dùng sáng tạo\", icon: \"PaintbrushVertical\" },\n            { name: \"Frontend\", description: \"Phát triển giao diện web hiện đại\", icon: \"Code\" },\n            { name: \"Mobile Design\", description: \"Thiết kế ứng dụng di động\", icon: \"Smartphone\" },\n            { name: \"Content\", description: \"Tạo nội dung sáng tạo và hấp dẫn\", icon: \"FileImage\" }\n          ],\n          updatedAt: new Date()\n        });\n      }\n      res.json(other);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch other section\" });\n    }\n  });\n\n  app.post(\"/api/other\", async (req, res) => {\n    try {\n      const validatedData = insertOtherSchema.parse(req.body);\n      const other = await storage.createOrUpdateOtherSection(validatedData);\n      res.json(other);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid other section data\", error });\n    }\n  });\n\n  app.put(\"/api/skills\", async (req, res) => {\n    try {\n      const skillsSchema = z.array(z.object({\n        name: z.string(),\n        description: z.string(),\n        icon: z.string()\n      }));\n      const skills = skillsSchema.parse(req.body);\n      const other = await storage.updateSkills(skills);\n      res.json(other);\n    } catch (error) {\n      console.error(\"Error updating skills:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  // Custom sections routes\n  app.get(\"/api/sections\", async (req, res) => {\n    try {\n      const sections = await storage.getAllCustomSections();\n      res.json(sections);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch custom sections\" });\n    }\n  });\n\n  app.get(\"/api/sections/:id\", async (req, res) => {\n    try {\n      const section = await storage.getCustomSection(req.params.id);\n      if (!section) {\n        return res.status(404).json({ message: \"Section not found\" });\n      }\n      res.json(section);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch section\" });\n    }\n  });\n\n  app.post(\"/api/sections\", async (req, res) => {\n    try {\n      const validatedData = insertCustomSectionSchema.parse(req.body);\n      const section = await storage.createCustomSection(validatedData);\n      res.json(section);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid section data\", error });\n    }\n  });\n\n  app.put(\"/api/sections/:id\", async (req, res) => {\n    try {\n      const validatedData = insertCustomSectionSchema.partial().parse(req.body);\n      const section = await storage.updateCustomSection(req.params.id, validatedData);\n      res.json(section);\n    } catch (error) {\n      if (error instanceof Error && error.message === \"Custom section not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Invalid section data\", error });\n    }\n  });\n\n  app.delete(\"/api/sections/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteCustomSection(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Section not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete section\" });\n    }\n  });\n\n  app.put(\"/api/sections/:id/items\", async (req, res) => {\n    try {\n      const itemsSchema = z.array(z.object({\n        id: z.string(),\n        title: z.string(),\n        description: z.string().optional(),\n        content: z.string().optional(),\n        mediaUrl: z.string().optional(),\n        type: z.enum(['text', 'image', 'video', 'link']),\n        icon: z.string().optional(),\n        metadata: z.record(z.any()).optional(),\n      }));\n      const items = itemsSchema.parse(req.body);\n      const section = await storage.updateCustomSectionItems(req.params.id, items);\n      res.json(section);\n    } catch (error) {\n      if (error instanceof Error && error.message === \"Custom section not found\") {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(400).json({ message: \"Invalid items data\", error });\n    }\n  });\n\n  // Object Storage routes\n  // Serve public objects\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Serve uploaded objects (public access for portfolio)\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Get upload URL for file uploads\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Update content with uploaded file URL\n  app.put(\"/api/uploaded-content\", async (req, res) => {\n    if (!req.body.fileURL) {\n      return res.status(400).json({ error: \"fileURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.fileURL,\n        {\n          owner: \"portfolio-admin\",\n          visibility: \"public\", // Public access for portfolio content\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting file ACL:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10189},"server/storage.ts":{"content":"import { \n  type IntroSection, \n  type InsertIntroSection,\n  type ContentItem,\n  type InsertContentItem,\n  type OtherSection,\n  type InsertOtherSection,\n  type CustomSection,\n  type InsertCustomSection\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Introduction section\n  getIntroSection(): Promise<IntroSection | undefined>;\n  createOrUpdateIntroSection(intro: InsertIntroSection): Promise<IntroSection>;\n\n  // Content items\n  getAllContentItems(): Promise<ContentItem[]>;\n  getContentItem(id: string): Promise<ContentItem | undefined>;\n  createContentItem(content: InsertContentItem): Promise<ContentItem>;\n  updateContentItem(id: string, content: Partial<InsertContentItem>): Promise<ContentItem>;\n  deleteContentItem(id: string): Promise<boolean>;\n\n  // Other section\n  getOtherSection(): Promise<OtherSection | undefined>;\n  createOrUpdateOtherSection(other: InsertOtherSection): Promise<OtherSection>;\n  updateSkills(skills: Array<{ name: string; description: string; icon: string }>): Promise<OtherSection>;\n\n  // Custom sections\n  getAllCustomSections(): Promise<CustomSection[]>;\n  getCustomSection(id: string): Promise<CustomSection | undefined>;\n  createCustomSection(section: InsertCustomSection): Promise<CustomSection>;\n  updateCustomSection(id: string, section: Partial<InsertCustomSection>): Promise<CustomSection>;\n  deleteCustomSection(id: string): Promise<boolean>;\n  updateCustomSectionItems(id: string, items: CustomSection['items']): Promise<CustomSection>;\n}\n\nexport class MemStorage implements IStorage {\n  private introSection: IntroSection | undefined;\n  private contentItems: Map<string, ContentItem>;\n  private otherSection: OtherSection | undefined;\n  private customSections: Map<string, CustomSection>;\n\n  constructor() {\n    this.contentItems = new Map();\n    this.customSections = new Map();\n    \n    // Initialize with default data\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Default introduction\n    this.introSection = {\n      id: randomUUID(),\n      title: \"Xin chào, tôi là\",\n      name: \"Creative Designer\",\n      description: \"Tôi tạo ra những trải nghiệm số đẹp và có ý nghĩa thông qua thiết kế sáng tạo và công nghệ hiện đại.\",\n      profileImage: \"\",\n      updatedAt: new Date(),\n    };\n\n    // Default other section\n    this.otherSection = {\n      id: randomUUID(),\n      contactInfo: {\n        email: \"hello@portfolio.com\",\n        phone: \"+84 123 456 789\",\n        location: \"Hà Nội, Việt Nam\",\n      },\n      socialLinks: {\n        facebook: \"\",\n        github: \"\",\n        zalo: \"\",\n      },\n      skills: [\n        { name: \"UI/UX Design\", description: \"Thiết kế giao diện người dùng sáng tạo\", icon: \"PaintbrushVertical\" },\n        { name: \"Frontend\", description: \"Phát triển giao diện web hiện đại\", icon: \"Code\" },\n        { name: \"Mobile Design\", description: \"Thiết kế ứng dụng di động\", icon: \"Smartphone\" },\n        { name: \"Content\", description: \"Tạo nội dung sáng tạo và hấp dẫn\", icon: \"FileImage\" }\n      ],\n      updatedAt: new Date(),\n    };\n\n    // Create default sections\n    const defaultSection: CustomSection = {\n      id: \"default\",\n      title: \"Trang chính\",\n      description: \"Nội dung hiển thị trên trang chủ\",\n      type: \"grid\",\n      order: \"0\",\n      backgroundColor: \"bg-white\",\n      items: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.customSections.set(\"default\", defaultSection);\n\n    // Don't create \"Nội dung của tôi\" section - use default section for main content\n  }\n\n  async getIntroSection(): Promise<IntroSection | undefined> {\n    return this.introSection;\n  }\n\n  async createOrUpdateIntroSection(intro: InsertIntroSection): Promise<IntroSection> {\n    if (this.introSection) {\n      this.introSection = {\n        ...this.introSection,\n        ...intro,\n        profileImage: intro.profileImage || \"\",\n        updatedAt: new Date(),\n      };\n    } else {\n      this.introSection = {\n        id: randomUUID(),\n        ...intro,\n        profileImage: intro.profileImage || \"\",\n        updatedAt: new Date(),\n      };\n    }\n    return this.introSection;\n  }\n\n  async getAllContentItems(): Promise<ContentItem[]> {\n    return Array.from(this.contentItems.values()).sort(\n      (a, b) => b.createdAt!.getTime() - a.createdAt!.getTime()\n    );\n  }\n\n  async getContentItem(id: string): Promise<ContentItem | undefined> {\n    return this.contentItems.get(id);\n  }\n\n  async createContentItem(content: InsertContentItem): Promise<ContentItem> {\n    const id = randomUUID();\n    const now = new Date();\n    const newItem: ContentItem = {\n      id,\n      ...content,\n      content: content.content || null,\n      mediaUrl: content.mediaUrl || null,\n      excerpt: content.excerpt || null,\n      sectionId: content.sectionId || \"default\",\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.contentItems.set(id, newItem);\n    return newItem;\n  }\n\n  async updateContentItem(id: string, content: Partial<InsertContentItem>): Promise<ContentItem> {\n    const existingItem = this.contentItems.get(id);\n    if (!existingItem) {\n      throw new Error(\"Content item not found\");\n    }\n    \n    const updatedItem: ContentItem = {\n      ...existingItem,\n      ...content,\n      updatedAt: new Date(),\n    };\n    this.contentItems.set(id, updatedItem);\n    return updatedItem;\n  }\n\n  async deleteContentItem(id: string): Promise<boolean> {\n    return this.contentItems.delete(id);\n  }\n\n  async getOtherSection(): Promise<OtherSection | undefined> {\n    return this.otherSection;\n  }\n\n  async createOrUpdateOtherSection(other: InsertOtherSection): Promise<OtherSection> {\n    if (this.otherSection) {\n      this.otherSection = {\n        ...this.otherSection,\n        contactInfo: other.contactInfo || null,\n        socialLinks: other.socialLinks ? {\n          facebook: (other.socialLinks.facebook as string) || \"\",\n          github: (other.socialLinks.github as string) || \"\",\n          zalo: (other.socialLinks.zalo as string) || \"\",\n        } : null,\n        skills: other.skills ? [...other.skills] : null,\n        updatedAt: new Date(),\n      };\n    } else {\n      this.otherSection = {\n        id: randomUUID(),\n        contactInfo: other.contactInfo || null,\n        socialLinks: other.socialLinks ? {\n          facebook: (other.socialLinks.facebook as string) || \"\",\n          github: (other.socialLinks.github as string) || \"\",\n          zalo: (other.socialLinks.zalo as string) || \"\",\n        } : null,\n        skills: other.skills ? [...other.skills] : null,\n        updatedAt: new Date(),\n      };\n    }\n    return this.otherSection!;\n  }\n\n  async updateSkills(skills: Array<{ name: string; description: string; icon: string }>): Promise<OtherSection> {\n    if (!this.otherSection) {\n      this.otherSection = {\n        id: randomUUID(),\n        contactInfo: null,\n        socialLinks: null,\n        skills,\n        updatedAt: new Date(),\n      };\n    } else {\n      this.otherSection = {\n        ...this.otherSection,\n        skills,\n        updatedAt: new Date(),\n      };\n    }\n    return this.otherSection;\n  }\n\n  // Custom sections methods\n  async getAllCustomSections(): Promise<CustomSection[]> {\n    return Array.from(this.customSections.values()).sort((a, b) => \n      parseInt(a.order) - parseInt(b.order)\n    );\n  }\n\n  async getCustomSection(id: string): Promise<CustomSection | undefined> {\n    return this.customSections.get(id);\n  }\n\n  async createCustomSection(section: InsertCustomSection): Promise<CustomSection> {\n    const newSection: CustomSection = {\n      id: randomUUID(),\n      title: section.title,\n      description: section.description || null,\n      type: section.type,\n      order: section.order,\n      backgroundColor: section.backgroundColor || null,\n      items: (section.items || []) as CustomSection['items'],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.customSections.set(newSection.id, newSection);\n    return newSection;\n  }\n\n  async updateCustomSection(id: string, section: Partial<InsertCustomSection>): Promise<CustomSection> {\n    const existingSection = this.customSections.get(id);\n    if (!existingSection) {\n      throw new Error(\"Custom section not found\");\n    }\n    \n    const updatedSection: CustomSection = {\n      ...existingSection,\n      title: section.title !== undefined ? section.title : existingSection.title,\n      description: section.description !== undefined ? section.description || null : existingSection.description,\n      type: section.type !== undefined ? section.type : existingSection.type,\n      order: section.order !== undefined ? section.order : existingSection.order,\n      backgroundColor: section.backgroundColor !== undefined ? section.backgroundColor || null : existingSection.backgroundColor,\n      items: section.items !== undefined ? ((section.items || []) as CustomSection['items']) : existingSection.items,\n      updatedAt: new Date(),\n    };\n    this.customSections.set(id, updatedSection);\n    return updatedSection;\n  }\n\n  async deleteCustomSection(id: string): Promise<boolean> {\n    return this.customSections.delete(id);\n  }\n\n  async updateCustomSectionItems(id: string, items: CustomSection['items']): Promise<CustomSection> {\n    const existingSection = this.customSections.get(id);\n    if (!existingSection) {\n      throw new Error(\"Custom section not found\");\n    }\n    \n    const updatedSection: CustomSection = {\n      ...existingSection,\n      items,\n      updatedAt: new Date(),\n    };\n    this.customSections.set(id, updatedSection);\n    return updatedSection;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9746},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const introSection = pgTable(\"intro_section\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  profileImage: text(\"profile_image\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contentItems = pgTable(\"content_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // 'text', 'image', 'video'\n  content: text(\"content\"), // text content or description\n  mediaUrl: text(\"media_url\"), // image or video URL\n  excerpt: text(\"excerpt\"),\n  sectionId: varchar(\"section_id\").default(\"default\"), // section to display in\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const otherSection = pgTable(\"other_section\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contactInfo: jsonb(\"contact_info\").$type<{\n    email: string;\n    phone: string;\n    location: string;\n  }>(),\n  socialLinks: jsonb(\"social_links\").$type<{\n    facebook?: string;\n    github?: string;\n    zalo?: string;\n  }>(),\n  skills: jsonb(\"skills\").$type<Array<{\n    name: string;\n    description: string;\n    icon: string;\n  }>>(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const customSections = pgTable(\"custom_sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // 'grid', 'list', 'cards'\n  order: text(\"order\").notNull(), // display order\n  backgroundColor: text(\"background_color\").default(\"bg-white\"),\n  items: jsonb(\"items\").$type<Array<{\n    id: string;\n    title: string;\n    description?: string;\n    content?: string;\n    mediaUrl?: string;\n    type: 'text' | 'image' | 'video' | 'link';\n    icon?: string;\n    metadata?: Record<string, any>;\n  }>>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertIntroSchema = createInsertSchema(introSection).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertContentSchema = createInsertSchema(contentItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOtherSchema = createInsertSchema(otherSection).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertCustomSectionSchema = createInsertSchema(customSections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type IntroSection = typeof introSection.$inferSelect;\nexport type InsertIntroSection = z.infer<typeof insertIntroSchema>;\nexport type ContentItem = typeof contentItems.$inferSelect;\nexport type InsertContentItem = z.infer<typeof insertContentSchema>;\nexport type OtherSection = typeof otherSection.$inferSelect;\nexport type InsertOtherSection = z.infer<typeof insertOtherSchema>;\nexport type CustomSection = typeof customSections.$inferSelect;\nexport type InsertCustomSection = z.infer<typeof insertCustomSectionSchema>;\n","size_bytes":3335},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Navigation } from \"@/components/navigation\";\nimport { HomePage } from \"@/pages/home\";\nimport { AdminPage } from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\nimport { localStorage } from \"@/lib/local-storage\";\nimport { AdminLogin } from \"@/components/admin-login\";\n\nfunction Router() {\n  const [isAdminMode, setIsAdminMode] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [showLoginDialog, setShowLoginDialog] = useState(false);\n\n  // Check authentication on load\n  useEffect(() => {\n    const authStatus = window.localStorage.getItem(\"adminAuthenticated\");\n    const loginTime = window.localStorage.getItem(\"adminLoginTime\");\n    \n    // Session expires after 24 hours\n    const sessionExpiry = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n    const isSessionValid = loginTime && (Date.now() - parseInt(loginTime)) < sessionExpiry;\n    \n    setIsAuthenticated(authStatus === \"true\" && !!isSessionValid);\n  }, []);\n\n  // Sync data with localStorage for offline functionality\n  useEffect(() => {\n    const handleDataUpdate = () => {\n      // Save data to localStorage when queries are updated\n      const introData = queryClient.getQueryData([\"/api/intro\"]);\n      const contentData = queryClient.getQueryData([\"/api/content\"]);\n      const otherData = queryClient.getQueryData([\"/api/other\"]);\n      \n      if (introData) localStorage.saveIntro(introData);\n      if (contentData && Array.isArray(contentData)) localStorage.saveContent(contentData);\n      if (otherData) localStorage.saveOther(otherData);\n    };\n\n    // Listen for query updates\n    const unsubscribe = queryClient.getQueryCache().subscribe(handleDataUpdate);\n    \n    return unsubscribe;\n  }, []);\n\n  const handleToggleAdmin = () => {\n    if (isAdminMode) {\n      // Logout from admin mode\n      setIsAdminMode(false);\n    } else {\n      // Check authentication before entering admin mode\n      if (isAuthenticated) {\n        setIsAdminMode(true);\n      } else {\n        setShowLoginDialog(true);\n      }\n    }\n  };\n\n  const handleLoginSuccess = () => {\n    setIsAuthenticated(true);\n    setIsAdminMode(true);\n  };\n\n  const handleLogout = () => {\n    window.localStorage.removeItem(\"adminAuthenticated\");\n    window.localStorage.removeItem(\"adminLoginTime\");\n    setIsAuthenticated(false);\n    setIsAdminMode(false);\n  };\n\n  return (\n    <>\n      <Navigation \n        isAdminMode={isAdminMode} \n        onToggleAdmin={handleToggleAdmin}\n        onLogout={handleLogout}\n        isAuthenticated={isAuthenticated}\n      />\n      \n      {isAdminMode && isAuthenticated ? (\n        <AdminPage />\n      ) : (\n        <Switch>\n          <Route path=\"/\" component={HomePage} />\n          <Route component={NotFound} />\n        </Switch>\n      )}\n\n      <AdminLogin\n        isOpen={showLoginDialog}\n        onClose={() => setShowLoginDialog(false)}\n        onSuccess={handleLoginSuccess}\n      />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3464},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom animations */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40%, 43% {\n    transform: translateY(-30px);\n  }\n  70% {\n    transform: translateY(-15px);\n  }\n  90% {\n    transform: translateY(-4px);\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -468px 0;\n  }\n  100% {\n    background-position: 468px 0;\n  }\n}\n\n.animate-fade-in-up {\n  animation: fadeInUp 0.6s ease-out;\n}\n\n.animate-slide-in-left {\n  animation: slideInLeft 0.6s ease-out;\n}\n\n.animate-slide-in-right {\n  animation: slideInRight 0.6s ease-out;\n}\n\n.animate-scale-in {\n  animation: scaleIn 0.3s ease-out;\n}\n\n.animate-pulse-custom {\n  animation: pulse 2s infinite;\n}\n\n.animate-bounce-custom {\n  animation: bounce 1s;\n}\n\n.shimmer {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 400% 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n/* Button hover animations */\n.btn-hover-scale {\n  transition: all 0.3s ease;\n}\n\n.btn-hover-scale:hover {\n  transform: scale(1.05);\n}\n\n.btn-hover-lift {\n  transition: all 0.3s ease;\n}\n\n.btn-hover-lift:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* Card animations */\n.card-hover {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-hover:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n}\n\n/* Loading spinner */\n.loading-spinner {\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid #ff6b6b;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Smooth transitions for all interactive elements */\n* {\n  transition: color 0.2s ease, background-color 0.2s ease, border-color 0.2s ease, transform 0.2s ease;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 40%, 24%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 24%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 24%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(354, 100%, 70%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(177, 62%, 59%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(195, 68%, 61%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --success: hsl(54, 100%, 68%);\n  --success-foreground: hsl(210, 40%, 24%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(210, 40%, 24%);\n  --radius: 0.75rem;\n  \n  /* Custom vibrant colors - Enhanced contrast */\n  --coral: hsl(354, 100%, 55%);\n  --turquoise: hsl(177, 62%, 45%);\n  --sky: hsl(195, 68%, 50%);\n  --sunny: hsl(54, 100%, 55%);\n  --slate: hsl(210, 40%, 15%);\n  --light-grey: hsl(210, 40%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(354, 100%, 70%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(177, 62%, 59%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(195, 68%, 61%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --success: hsl(54, 100%, 68%);\n  --success-foreground: hsl(240, 10%, 3.9%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', 'Poppins', system-ui, -apple-system, sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-coral {\n    color: hsl(354, 100%, 70%);\n  }\n  \n  .text-turquoise {\n    color: hsl(177, 62%, 59%);\n  }\n  \n  .text-sky {\n    color: hsl(195, 68%, 61%);\n  }\n  \n  .text-sunny {\n    color: hsl(54, 100%, 68%);\n  }\n  \n  .text-slate {\n    color: hsl(210, 40%, 24%);\n  }\n  \n  .bg-coral {\n    background-color: hsl(354, 100%, 70%);\n  }\n  \n  .bg-turquoise {\n    background-color: hsl(177, 62%, 59%);\n  }\n  \n  .bg-sky {\n    background-color: hsl(195, 68%, 61%);\n  }\n  \n  .bg-sunny {\n    background-color: hsl(54, 100%, 68%);\n  }\n  \n  .bg-slate {\n    background-color: hsl(210, 40%, 24%);\n  }\n  \n  .border-coral {\n    border-color: hsl(354, 100%, 70%);\n  }\n  \n  .border-turquoise {\n    border-color: hsl(177, 62%, 59%);\n  }\n  \n  .border-sky {\n    border-color: hsl(195, 68%, 61%);\n  }\n  \n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(354, 100%, 70%) 0%, hsl(177, 62%, 59%) 50%, hsl(195, 68%, 61%) 100%);\n  }\n  \n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.9);\n  }\n  \n  .card-hover {\n    transition: all 0.3s ease;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-20px); }\n  }\n  \n  @keyframes slideUp {\n    from { transform: translateY(30px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n  }\n  \n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in;\n  }\n}\n\n.font-poppins {\n  font-family: 'Poppins', sans-serif;\n}\n\n.font-inter {\n  font-family: 'Inter', sans-serif;\n}\n","size_bytes":6451},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/add-content-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Upload, X, Save } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ContentItem, InsertContentItem } from \"@shared/schema\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\"; \nimport { OfflineStorage } from \"@/lib/offlineStorage\";\nimport type { UploadResult } from \"@uppy/core\";\n\nconst contentFormSchema = z.object({\n  title: z.string().min(1, \"Tiêu đề không được để trống\"),\n  type: z.enum([\"text\", \"image\", \"video\"]),\n  content: z.string().optional(),\n  mediaUrl: z.string().optional(),\n  excerpt: z.string().optional(),\n  sectionId: z.string().default(\"default\"),\n});\n\ntype ContentFormData = z.infer<typeof contentFormSchema>;\n\ninterface AddContentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingItem?: ContentItem;\n  selectedSectionId?: string;\n}\n\nexport function AddContentModal({ isOpen, onClose, editingItem, selectedSectionId = \"default\" }: AddContentModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    formState: { errors }\n  } = useForm<ContentFormData>({\n    resolver: zodResolver(contentFormSchema),\n    defaultValues: editingItem ? {\n      title: editingItem.title,\n      type: editingItem.type as \"text\" | \"image\" | \"video\",\n      content: editingItem.content || \"\",\n      mediaUrl: editingItem.mediaUrl || \"\",\n      excerpt: editingItem.excerpt || \"\",\n      sectionId: editingItem.sectionId || selectedSectionId,\n    } : {\n      title: \"\",\n      type: \"text\",\n      content: \"\",\n      mediaUrl: \"\",\n      excerpt: \"\",\n      sectionId: selectedSectionId,\n    },\n    values: editingItem ? {\n      title: editingItem.title,\n      type: editingItem.type as \"text\" | \"image\" | \"video\",\n      content: editingItem.content || \"\",\n      mediaUrl: editingItem.mediaUrl || \"\",\n      excerpt: editingItem.excerpt || \"\",\n      sectionId: editingItem.sectionId || selectedSectionId,\n    } : {\n      title: \"\",\n      type: \"text\",\n      content: \"\",\n      mediaUrl: \"\",\n      excerpt: \"\",\n      sectionId: selectedSectionId,\n    }\n  });\n\n  const contentType = watch(\"type\");\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertContentItem) => {\n      const response = await apiRequest(\"POST\", \"/api/content\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      toast({\n        title: \"Thành công\",\n        description: \"Item đã được thêm thành công\",\n      });\n      handleClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể thêm item\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertContentItem) => {\n      const response = await apiRequest(\"PUT\", `/api/content/${editingItem?.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      toast({\n        title: \"Thành công\",\n        description: \"Item đã được cập nhật thành công\",\n      });\n      handleClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể cập nhật item\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleClose = () => {\n    reset();\n    onClose();\n  };\n\n\n\n  const onSubmit = (data: ContentFormData) => {\n    console.log(\"Form data:\", data);\n    console.log(\"Selected section ID:\", selectedSectionId);\n    \n    const submitData: InsertContentItem = {\n      title: data.title,\n      type: data.type,\n      content: data.content || null,\n      mediaUrl: data.mediaUrl || null,\n      excerpt: data.excerpt || null,\n      sectionId: selectedSectionId, // Force use selectedSectionId\n    };\n\n    console.log(\"Submit data:\", submitData);\n\n    if (editingItem) {\n      updateMutation.mutate(submitData);\n    } else {\n      createMutation.mutate(submitData);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-poppins font-semibold text-slate\">\n            {editingItem ? \"Chỉnh sửa nội dung\" : \"Thêm nội dung mới\"}\n          </DialogTitle>\n          <DialogDescription>\n            {editingItem \n              ? \"Cập nhật thông tin nội dung của bạn.\"\n              : `Tạo nội dung mới cho section. Selected: ${selectedSectionId}`\n            }\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"type\">Loại nội dung</Label>\n            <Select \n              value={contentType} \n              onValueChange={(value) => setValue(\"type\", value as \"text\" | \"image\" | \"video\")}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Chọn loại nội dung\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"text\">Văn bản</SelectItem>\n                <SelectItem value=\"image\">Hình ảnh</SelectItem>\n                <SelectItem value=\"video\">Video</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"title\">Tiêu đề *</Label>\n            <Input\n              id=\"title\"\n              {...register(\"title\")}\n              placeholder=\"Nhập tiêu đề...\"\n              className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n            />\n            {errors.title && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.title.message}</p>\n            )}\n          </div>\n\n          {contentType === \"text\" && (\n            <div>\n              <Label htmlFor=\"content\">Nội dung</Label>\n              <Textarea\n                id=\"content\"\n                {...register(\"content\")}\n                rows={6}\n                placeholder=\"Nhập nội dung...\"\n                className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n              />\n            </div>\n          )}\n\n          {contentType === \"image\" && (\n            <>\n              <div>\n                <Label>Tải ảnh lên</Label>\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760} // 10MB\n                  onGetUploadParameters={async () => {\n                    const response = await fetch('/api/objects/upload', {\n                      method: 'POST'\n                    });\n                    const data = await response.json();\n                    return {\n                      method: 'PUT' as const,\n                      url: data.uploadURL\n                    };\n                  }}\n                  onComplete={(result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n                    if (result.successful.length > 0) {\n                      const uploadURL = result.successful[0].uploadURL;\n                      setValue(\"mediaUrl\", uploadURL);\n                      \n                      // Set ACL policy for the uploaded file\n                      fetch('/api/uploaded-content', {\n                        method: 'PUT',\n                        headers: {\n                          'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ fileURL: uploadURL })\n                      }).then(res => res.json()).then(data => {\n                        setValue(\"mediaUrl\", data.objectPath);\n                        toast({\n                          title: \"Thành công\",\n                          description: \"Ảnh đã được tải lên thành công!\"\n                        });\n                      }).catch(error => {\n                        console.error('Error setting file ACL:', error);\n                        // Store in offline storage for later sync\n                        OfflineStorage.saveOfflineFile({\n                          url: uploadURL,\n                          timestamp: Date.now(),\n                          name: `image_${Date.now()}`,\n                          type: 'content'\n                        });\n                        toast({\n                          title: \"Chế độ offline\",\n                          description: \"Ảnh đã được lưu tạm thời, sẽ đồng bộ khi có kết nối!\",\n                          variant: \"default\"\n                        });\n                      });\n                    }\n                  }}\n                  buttonClassName=\"w-full border-2 border-dashed border-gray-300 hover:border-coral transition-colors duration-300 p-8 text-center bg-transparent text-gray-500 hover:text-coral hover:bg-coral/5\"\n                >\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <Upload size={32} />\n                    <span>Thêm ảnh</span>\n                    <p className=\"text-sm text-gray-400\">PNG, JPG lên đến 10MB</p>\n                  </div>\n                </ObjectUploader>\n              </div>\n              <div>\n                <Label htmlFor=\"content\">Mô tả ảnh</Label>\n                <Textarea\n                  id=\"content\"\n                  {...register(\"content\")}\n                  rows={3}\n                  placeholder=\"Mô tả ngắn về hình ảnh...\"\n                  className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                />\n              </div>\n            </>\n          )}\n\n          {contentType === \"video\" && (\n            <>\n              <div>\n                <Label htmlFor=\"mediaUrl\">Link video</Label>\n                <Input\n                  id=\"mediaUrl\"\n                  {...register(\"mediaUrl\")}\n                  type=\"url\"\n                  placeholder=\"https://youtube.com/watch?v=...\"\n                  className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Hoặc tải video lên bằng cách chọn file bên dưới\n                </p>\n              </div>\n              \n              <div>\n                <Label>Tải video lên</Label>\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={104857600} // 100MB\n                  onGetUploadParameters={async () => {\n                    const response = await fetch('/api/objects/upload', {\n                      method: 'POST'\n                    });\n                    const data = await response.json();\n                    return {\n                      method: 'PUT' as const,\n                      url: data.uploadURL\n                    };\n                  }}\n                  onComplete={(result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n                    if (result.successful.length > 0) {\n                      const uploadURL = result.successful[0].uploadURL;\n                      setValue(\"mediaUrl\", uploadURL);\n                      \n                      // Set ACL policy for the uploaded file\n                      fetch('/api/uploaded-content', {\n                        method: 'PUT',\n                        headers: {\n                          'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ fileURL: uploadURL })\n                      }).then(res => res.json()).then(data => {\n                        setValue(\"mediaUrl\", data.objectPath);\n                        toast({\n                          title: \"Thành công\",\n                          description: \"Video đã được tải lên thành công!\"\n                        });\n                      }).catch(error => {\n                        console.error('Error setting file ACL:', error);\n                        // Store in offline storage for later sync\n                        OfflineStorage.saveOfflineFile({\n                          url: uploadURL,\n                          timestamp: Date.now(),\n                          name: `video_${Date.now()}`,\n                          type: 'content'\n                        });\n                        toast({\n                          title: \"Chế độ offline\",\n                          description: \"Video đã được lưu tạm thời, sẽ đồng bộ khi có kết nối!\",\n                          variant: \"default\"\n                        });\n                      });\n                    }\n                  }}\n                  buttonClassName=\"w-full border-2 border-dashed border-gray-300 hover:border-coral transition-colors duration-300 p-8 text-center bg-transparent text-gray-500 hover:text-coral hover:bg-coral/5\"\n                >\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <Upload size={32} />\n                    <span>Tải video lên</span>\n                    <p className=\"text-sm text-gray-400\">MP4, AVI lên đến 100MB</p>\n                  </div>\n                </ObjectUploader>\n              </div>\n\n              <div>\n                <Label htmlFor=\"content\">Mô tả video</Label>\n                <Textarea\n                  id=\"content\"\n                  {...register(\"content\")}\n                  rows={3}\n                  placeholder=\"Mô tả nội dung video...\"\n                  className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                />\n              </div>\n            </>\n          )}\n\n          <div>\n            <Label htmlFor=\"excerpt\">Tóm tắt ngắn</Label>\n            <Textarea\n              id=\"excerpt\"\n              {...register(\"excerpt\")}\n              rows={2}\n              placeholder=\"Tóm tắt ngắn gọn...\"\n              className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n            >\n              Hủy\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"bg-coral text-white hover:bg-turquoise transition-all duration-300 border-0\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n            >\n              <Save className=\"mr-2\" size={16} />\n              {editingItem ? \"Cập nhật\" : \"Lưu nội dung\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15606},"client/src/components/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Lock, Eye, EyeOff } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminLoginProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nconst ADMIN_PASSWORD = \"admin2025\"; // Mật khẩu admin đơn giản\n\nexport function AdminLogin({ isOpen, onClose, onSuccess }: AdminLoginProps) {\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // Mô phỏng thời gian xác thực\n    setTimeout(() => {\n      if (password === ADMIN_PASSWORD) {\n        // Lưu trạng thái đăng nhập vào localStorage\n        localStorage.setItem(\"adminAuthenticated\", \"true\");\n        localStorage.setItem(\"adminLoginTime\", Date.now().toString());\n        \n        toast({\n          title: \"Đăng nhập thành công\",\n          description: \"Chào mừng bạn trở lại, Admin!\",\n        });\n        \n        setPassword(\"\");\n        onSuccess();\n        onClose();\n      } else {\n        toast({\n          title: \"Sai mật khẩu\",\n          description: \"Vui lòng kiểm tra lại mật khẩu.\",\n          variant: \"destructive\",\n        });\n      }\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const handleClose = () => {\n    setPassword(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-poppins font-semibold text-slate flex items-center justify-center\">\n            <Lock className=\"text-coral mr-3\" size={24} />\n            Đăng nhập Admin\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-gray-600\">\n            Cần xác thực để truy cập vào trang quản trị nội dung\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-coral to-turquoise rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Lock className=\"text-white\" size={32} />\n            </div>\n            <p className=\"text-gray-600\">\n              Nhập mật khẩu để truy cập trang quản trị\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Mật khẩu</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Nhập mật khẩu...\"\n                className=\"focus:ring-2 focus:ring-coral focus:border-transparent pr-10\"\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"text-gray-400\" size={16} />\n                ) : (\n                  <Eye className=\"text-gray-400\" size={16} />\n                )}\n              </Button>\n            </div>\n          </div>\n\n\n\n          <div className=\"flex space-x-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              className=\"flex-1\"\n              disabled={isLoading}\n            >\n              Hủy\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"flex-1 bg-coral text-white hover:bg-opacity-90 transition-all duration-300\"\n              disabled={isLoading || !password}\n            >\n              {isLoading ? \"Đang xác thực...\" : \"Đăng nhập\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4518},"client/src/components/content-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Image, Video, Eye, Edit2, Trash2 } from \"lucide-react\";\nimport type { ContentItem } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport { ContentDetailModal } from \"./content-detail-modal\";\n\ninterface ContentCardProps {\n  item: ContentItem;\n  isAdmin?: boolean;\n  onEdit?: (item: ContentItem) => void;\n  onDelete?: (id: string) => void;\n}\n\nexport function ContentCard({ item, isAdmin = false, onEdit, onDelete }: ContentCardProps) {\n  const [showDetailModal, setShowDetailModal] = useState(false);\n  const getIcon = () => {\n    switch (item.type) {\n      case \"text\":\n        return <FileText className=\"text-coral\" size={20} />;\n      case \"image\":\n        return <Image className=\"text-turquoise\" size={20} />;\n      case \"video\":\n        return <Video className=\"text-sky\" size={20} />;\n      default:\n        return <FileText className=\"text-coral\" size={20} />;\n    }\n  };\n\n  const getBadgeColor = () => {\n    switch (item.type) {\n      case \"text\":\n        return \"bg-coral text-white\";\n      case \"image\":\n        return \"bg-turquoise text-white\";\n      case \"video\":\n        return \"bg-sky text-white\";\n      default:\n        return \"bg-coral text-white\";\n    }\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"\";\n    return new Date(date).toLocaleDateString(\"vi-VN\");\n  };\n\n  if (isAdmin) {\n    return (\n      <div className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            {getIcon()}\n            <h4 className=\"font-medium text-slate\">{item.title}</h4>\n            <Badge className={getBadgeColor()}>\n              {item.type === \"text\" ? \"Text\" : item.type === \"image\" ? \"Hình ảnh\" : \"Video\"}\n            </Badge>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => onEdit?.(item)}\n              className=\"text-turquoise hover:text-sky hover:bg-turquoise/10\"\n            >\n              <Edit2 size={16} />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => onDelete?.(item.id)}\n              className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n            >\n              <Trash2 size={16} />\n            </Button>\n          </div>\n        </div>\n        <p className=\"text-gray-600 text-sm mb-3\">\n          {item.content || item.excerpt || \"Không có mô tả\"}\n        </p>\n        <div className=\"text-xs text-gray-500\">\n          Cập nhật: {formatDate(item.updatedAt)}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden card-hover\">\n        {item.type === \"image\" && item.mediaUrl && (\n          <img \n            src={item.mediaUrl} \n            alt={item.title}\n            className=\"w-full h-48 object-cover\"\n          />\n        )}\n        {item.type === \"video\" && item.mediaUrl && (\n          <div className=\"relative\">\n            {item.mediaUrl.includes('youtube.com') || item.mediaUrl.includes('youtu.be') ? (\n              <div className=\"aspect-w-16 aspect-h-9\">\n                <iframe\n                  src={item.mediaUrl.replace('watch?v=', 'embed/')}\n                  className=\"w-full h-48\"\n                  allowFullScreen\n                />\n              </div>\n            ) : (\n              <video\n                src={item.mediaUrl}\n                poster={item.mediaUrl}\n                controls\n                className=\"w-full h-48 object-cover\"\n              />\n            )}\n          </div>\n        )}\n        \n        <CardContent className=\"p-6\">\n          {item.type === \"text\" && (\n            <div className=\"w-12 h-12 bg-gradient-to-br from-coral to-turquoise rounded-lg flex items-center justify-center mb-4\">\n              <FileText className=\"text-white\" size={20} />\n            </div>\n          )}\n          \n          <h3 className=\"text-xl font-poppins font-semibold text-slate mb-3\">\n            {item.title}\n          </h3>\n          \n          <p className=\"text-gray-600 mb-4\">\n            {item.excerpt || item.content?.substring(0, 100) + \"...\" || \"\"}\n          </p>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-500\">\n              {formatDate(item.createdAt)}\n            </span>\n            \n            <Button \n              size=\"sm\"\n              onClick={() => setShowDetailModal(true)}\n              className=\"bg-coral text-white hover:bg-turquoise transition-all duration-300 btn-hover-scale border-0\"\n            >\n              <Eye className=\"mr-1\" size={16} />\n              {item.type === \"text\" ? \"Đọc thêm\" : \"Xem\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <ContentDetailModal \n        isOpen={showDetailModal}\n        onClose={() => setShowDetailModal(false)}\n        item={item}\n      />\n    </>\n  );\n}\n\nexport function EmptyContentCard() {\n  return (\n    <div className=\"bg-white/70 backdrop-blur-sm border border-gray-200 rounded-3xl p-12 text-center min-h-[300px] flex flex-col items-center justify-center card-hover shadow-lg\">\n      <div className=\"w-20 h-20 bg-gradient-to-br from-coral/20 to-turquoise/20 rounded-full flex items-center justify-center mb-6 animate-pulse-custom\">\n        <FileText className=\"text-gray-400\" size={32} />\n      </div>\n      <h3 className=\"text-xl font-semibold text-gray-600 mb-3\">Chưa có nội dung</h3>\n      <p className=\"text-gray-500\">Nội dung sẽ được thêm vào sau</p>\n    </div>\n  );\n}\n","size_bytes":5928},"client/src/components/create-section-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { InsertCustomSection, CustomSection } from \"@shared/schema\";\nimport { useEffect } from \"react\";\n\nconst createSectionSchema = z.object({\n  title: z.string().min(1, \"Tiêu đề không được để trống\"),\n  description: z.string().optional(),\n  type: z.enum([\"grid\", \"list\", \"cards\"], { required_error: \"Vui lòng chọn loại hiển thị\" }),\n  order: z.string().min(1, \"Thứ tự không được để trống\"),\n  backgroundColor: z.string().default(\"bg-white\"),\n});\n\ninterface CreateSectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: InsertCustomSection) => void;\n  editingSection?: CustomSection;\n}\n\nexport function CreateSectionModal({ isOpen, onClose, onSubmit, editingSection }: CreateSectionModalProps) {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    formState: { errors }\n  } = useForm<z.infer<typeof createSectionSchema>>({\n    resolver: zodResolver(createSectionSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      type: \"grid\",\n      order: \"1\",\n      backgroundColor: \"bg-white\"\n    }\n  });\n\n  useEffect(() => {\n    if (editingSection) {\n      setValue(\"title\", editingSection.title);\n      setValue(\"description\", editingSection.description || \"\");\n      setValue(\"type\", editingSection.type as \"grid\" | \"list\" | \"cards\");\n      setValue(\"order\", editingSection.order);\n      setValue(\"backgroundColor\", editingSection.backgroundColor || \"bg-white\");\n    } else {\n      reset();\n    }\n  }, [editingSection, setValue, reset]);\n\n  const selectedType = watch(\"type\");\n\n  const handleClose = () => {\n    reset();\n    onClose();\n  };\n\n  const handleFormSubmit = (data: z.infer<typeof createSectionSchema>) => {\n    onSubmit({\n      ...data,\n      items: []\n    });\n    reset();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            {editingSection ? \"Chỉnh sửa Section\" : \"Tạo Section Mới\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\">Tiêu đề</Label>\n            <Input\n              id=\"title\"\n              {...register(\"title\")}\n              placeholder=\"VD: Dự án của tôi\"\n              className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n            />\n            {errors.title && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.title.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Mô tả (tùy chọn)</Label>\n            <Textarea\n              id=\"description\"\n              {...register(\"description\")}\n              placeholder=\"Mô tả ngắn về section này\"\n              className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"type\">Kiểu hiển thị</Label>\n            <Select value={selectedType} onValueChange={(value) => setValue(\"type\", value as \"grid\" | \"list\" | \"cards\")}>\n              <SelectTrigger className=\"focus:ring-2 focus:ring-coral focus:border-transparent\">\n                <SelectValue placeholder=\"Chọn kiểu hiển thị\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"grid\">Lưới (Grid)</SelectItem>\n                <SelectItem value=\"list\">Danh sách (List)</SelectItem>\n                <SelectItem value=\"cards\">Thẻ (Cards)</SelectItem>\n              </SelectContent>\n            </Select>\n            {errors.type && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.type.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"order\">Thứ tự hiển thị</Label>\n            <Input\n              id=\"order\"\n              {...register(\"order\")}\n              placeholder=\"VD: 1\"\n              type=\"number\"\n              className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n            />\n            {errors.order && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.order.message}</p>\n            )}\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n              Hủy\n            </Button>\n            <Button type=\"submit\" className=\"bg-coral text-white hover:bg-turquoise border-0\">\n              {editingSection ? \"Cập nhật\" : \"Tạo Section\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5235},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Palette, Settings, ArrowLeft, LogOut, Download, Mail } from \"lucide-react\";\n\ninterface NavigationProps {\n  isAdminMode: boolean;\n  onToggleAdmin: () => void;\n  onLogout?: () => void;\n  isAuthenticated?: boolean;\n}\n\nexport function Navigation({ isAdminMode, onToggleAdmin, onLogout, isAuthenticated }: NavigationProps) {\n  const [location] = useLocation();\n\n  if (isAdminMode) {\n    return (\n      <nav className=\"fixed top-0 w-full z-50 glass-effect border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <h1 className=\"text-xl font-poppins font-bold text-slate flex items-center\">\n              <Settings className=\"text-coral mr-2\" size={20} />\n              Quản trị nội dung\n            </h1>\n            <div className=\"flex space-x-2\">\n              <Button\n                onClick={onLogout}\n                variant=\"outline\"\n                className=\"border-red-300 text-red-600 hover:bg-red-50\"\n              >\n                <LogOut className=\"mr-2\" size={16} />\n                Đăng xuất\n              </Button>\n              <Button\n                onClick={onToggleAdmin}\n                variant=\"outline\"\n                className=\"bg-gray-500 text-white border-gray-500 hover:bg-gray-600\"\n              >\n                <ArrowLeft className=\"mr-2\" size={16} />\n                Quay lại\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 glass-effect border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-8\">\n            <h1 className=\"text-xl font-poppins font-bold text-slate flex items-center\">\n              <Palette className=\"text-coral mr-2\" size={20} />\n              Portfolio\n            </h1>\n            <div className=\"hidden md:flex space-x-6\">\n              <a \n                href=\"#intro\" \n                className=\"text-slate hover:text-coral transition-colors duration-300\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  document.getElementById('intro')?.scrollIntoView({ behavior: 'smooth' });\n                }}\n              >\n                Giới thiệu\n              </a>\n              <a \n                href=\"#content\" \n                className=\"text-slate hover:text-coral transition-colors duration-300\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  // Tìm section content đầu tiên (không phải intro section)\n                  const contentSection = document.querySelector('section[id^=\"section-\"]') || \n                                        document.querySelector('#section-default');\n                  if (contentSection) {\n                    contentSection.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                  }\n                }}\n              >\n                Nội dung\n              </a>\n              <a \n                href=\"#other\" \n                className=\"text-slate hover:text-coral transition-colors duration-300\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  document.getElementById('other')?.scrollIntoView({ behavior: 'smooth' });\n                }}\n              >\n                Khác\n              </a>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={onToggleAdmin}\n              className=\"bg-gradient-to-r from-coral to-turquoise text-white hover:from-turquoise hover:to-sky transition-all duration-300\"\n            >\n              <Settings className=\"mr-2\" size={16} />\n              Admin\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4093},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/local-storage.ts":{"content":"const STORAGE_KEYS = {\n  INTRO: 'portfolio_intro',\n  CONTENT: 'portfolio_content',\n  OTHER: 'portfolio_other',\n  SKILLS: 'portfolio_skills'\n} as const;\n\nexport const localStorage = {\n  saveIntro: (data: any) => {\n    try {\n      window.localStorage.setItem(STORAGE_KEYS.INTRO, JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to save intro to localStorage:', error);\n    }\n  },\n\n  getIntro: () => {\n    try {\n      const data = window.localStorage.getItem(STORAGE_KEYS.INTRO);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Failed to get intro from localStorage:', error);\n      return null;\n    }\n  },\n\n  saveContent: (data: any[]) => {\n    try {\n      window.localStorage.setItem(STORAGE_KEYS.CONTENT, JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to save content to localStorage:', error);\n    }\n  },\n\n  getContent: () => {\n    try {\n      const data = window.localStorage.getItem(STORAGE_KEYS.CONTENT);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error('Failed to get content from localStorage:', error);\n      return [];\n    }\n  },\n\n  saveOther: (data: any) => {\n    try {\n      window.localStorage.setItem(STORAGE_KEYS.OTHER, JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to save other to localStorage:', error);\n    }\n  },\n\n  getOther: () => {\n    try {\n      const data = window.localStorage.getItem(STORAGE_KEYS.OTHER);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.error('Failed to get other from localStorage:', error);\n      return null;\n    }\n  },\n\n  saveSkills: (skills: Array<{ name: string; description: string; icon: string }>) => {\n    try {\n      window.localStorage.setItem(STORAGE_KEYS.SKILLS, JSON.stringify(skills));\n    } catch (error) {\n      console.error('Failed to save skills to localStorage:', error);\n    }\n  },\n\n  getSkills: () => {\n    try {\n      const data = window.localStorage.getItem(STORAGE_KEYS.SKILLS);\n      return data ? JSON.parse(data) : [\n        { name: \"UI/UX Design\", description: \"Thiết kế giao diện người dùng sáng tạo\", icon: \"PaintbrushVertical\" },\n        { name: \"Frontend\", description: \"Phát triển giao diện web hiện đại\", icon: \"Code\" },\n        { name: \"Mobile Design\", description: \"Thiết kế ứng dụng di động\", icon: \"Smartphone\" },\n        { name: \"Content\", description: \"Tạo nội dung sáng tạo và hấp dẫn\", icon: \"FileImage\" }\n      ];\n    } catch (error) {\n      console.error('Failed to get skills from localStorage:', error);\n      return [\n        { name: \"UI/UX Design\", description: \"Thiết kế giao diện người dùng sáng tạo\", icon: \"PaintbrushVertical\" },\n        { name: \"Frontend\", description: \"Phát triển giao diện web hiện đại\", icon: \"Code\" },\n        { name: \"Mobile Design\", description: \"Thiết kế ứng dụng di động\", icon: \"Smartphone\" },\n        { name: \"Content\", description: \"Tạo nội dung sáng tạo và hấp dẫn\", icon: \"FileImage\" }\n      ];\n    }\n  },\n\n  // Auto-save functionality for offline support\n  setupAutoSave: (callback: () => void) => {\n    const SAVE_INTERVAL = 30000; // Save every 30 seconds\n    return setInterval(callback, SAVE_INTERVAL);\n  },\n\n  clearAutoSave: (intervalId: NodeJS.Timeout) => {\n    clearInterval(intervalId);\n  }\n};\n","size_bytes":3408},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Plus, FileText, Image, Video, Clock, Upload, Save, Trash2, Layers, Edit, MoreVertical } from \"lucide-react\";\nimport { ContentCard } from \"@/components/content-card\";\nimport { AddContentModal } from \"@/components/add-content-modal\";\nimport { CreateSectionModal } from \"@/components/create-section-modal\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { OfflineStorage } from \"@/lib/offlineStorage\";\nimport type { IntroSection, ContentItem, OtherSection, InsertIntroSection, InsertOtherSection, CustomSection, InsertCustomSection } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\n\nconst skillsSchema = z.object({\n  skills: z.array(z.object({\n    name: z.string().min(1, \"Tên kỹ năng không được để trống\"),\n    description: z.string().min(1, \"Mô tả không được để trống\"),\n    icon: z.string().min(1, \"Icon không được để trống\")\n  }))\n});\n\nexport function AdminPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<ContentItem | undefined>();\n  const [isCreateSectionModalOpen, setIsCreateSectionModalOpen] = useState(false);\n  const [editingSection, setEditingSection] = useState<CustomSection | undefined>();\n  const [selectedSectionId, setSelectedSectionId] = useState<string>(\"default\");\n\n  const { data: intro } = useQuery<IntroSection>({\n    queryKey: [\"/api/intro\"],\n  });\n\n  const { data: contentItems = [] } = useQuery<ContentItem[]>({\n    queryKey: [\"/api/content\"],\n  });\n\n  const { data: other } = useQuery<OtherSection>({\n    queryKey: [\"/api/other\"],\n  });\n\n  const { data: customSections = [] } = useQuery<CustomSection[]>({\n    queryKey: [\"/api/sections\"],\n  });\n\n  // Introduction form\n  const {\n    register: registerIntro,\n    handleSubmit: handleSubmitIntro,\n    setValue: setIntroValue,\n    formState: { errors: introErrors }\n  } = useForm<InsertIntroSection>({\n    defaultValues: {\n      title: intro?.title || \"\",\n      name: intro?.name || \"\",\n      description: intro?.description || \"\",\n      profileImage: intro?.profileImage || \"\",\n    },\n    values: {\n      title: intro?.title || \"\",\n      name: intro?.name || \"\",\n      description: intro?.description || \"\",\n      profileImage: intro?.profileImage || \"\",\n    }\n  });\n\n  // Other section form\n  const {\n    register: registerOther,\n    handleSubmit: handleSubmitOther,\n    setValue: setOtherValue,\n    formState: { errors: otherErrors }\n  } = useForm<InsertOtherSection>({\n    defaultValues: {\n      contactInfo: other?.contactInfo || {\n        email: \"\",\n        phone: \"\",\n        location: \"\"\n      },\n      socialLinks: other?.socialLinks || {\n        facebook: \"\",\n        github: \"\",\n        zalo: \"\"\n      }\n    },\n    values: {\n      contactInfo: other?.contactInfo || {\n        email: \"\",\n        phone: \"\",\n        location: \"\"\n      },\n      socialLinks: other?.socialLinks || {\n        facebook: \"\",\n        github: \"\",\n        zalo: \"\"\n      }\n    }\n  });\n\n  // Mutations\n  const saveIntroMutation = useMutation({\n    mutationFn: async (data: InsertIntroSection) => {\n      const response = await apiRequest(\"POST\", \"/api/intro\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/intro\"] });\n      toast({\n        title: \"Thành công\",\n        description: \"Thông tin giới thiệu đã được lưu\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể lưu thông tin giới thiệu\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const saveOtherMutation = useMutation({\n    mutationFn: async (data: InsertOtherSection) => {\n      const response = await apiRequest(\"POST\", \"/api/other\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/other\"] });\n      toast({\n        title: \"Thành công\",\n        description: \"Thông tin khác đã được lưu\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể lưu thông tin\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Skills form\n  const {\n    control: skillsControl,\n    handleSubmit: handleSubmitSkills,\n    formState: { errors: skillsErrors }\n  } = useForm({\n    resolver: zodResolver(skillsSchema),\n    defaultValues: {\n      skills: other?.skills || [\n        { name: \"UI/UX Design\", description: \"Thiết kế giao diện người dùng sáng tạo\", icon: \"PaintbrushVertical\" },\n        { name: \"Frontend\", description: \"Phát triển giao diện web hiện đại\", icon: \"Code\" },\n        { name: \"Mobile Design\", description: \"Thiết kế ứng dụng di động\", icon: \"Smartphone\" },\n        { name: \"Content\", description: \"Tạo nội dung sáng tạo và hấp dẫn\", icon: \"FileImage\" }\n      ]\n    },\n    values: {\n      skills: other?.skills || [\n        { name: \"UI/UX Design\", description: \"Thiết kế giao diện người dùng sáng tạo\", icon: \"PaintbrushVertical\" },\n        { name: \"Frontend\", description: \"Phát triển giao diện web hiện đại\", icon: \"Code\" },\n        { name: \"Mobile Design\", description: \"Thiết kế ứng dụng di động\", icon: \"Smartphone\" },\n        { name: \"Content\", description: \"Tạo nội dung sáng tạo và hấp dẫn\", icon: \"FileImage\" }\n      ]\n    }\n  });\n\n  const { fields: skillFields, append: appendSkill, remove: removeSkill } = useFieldArray({\n    control: skillsControl,\n    name: \"skills\"\n  });\n\n  const saveSkillsMutation = useMutation({\n    mutationFn: async (data: { skills: Array<{ name: string; description: string; icon: string }> }) => {\n      const response = await apiRequest(\"PUT\", \"/api/skills\", data.skills);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/other\"] });\n      toast({\n        title: \"Thành công\",\n        description: \"Kỹ năng đã được cập nhật\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể lưu kỹ năng\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteContentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/content/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n      toast({\n        title: \"Thành công\",\n        description: \"Nội dung đã được xóa\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể xóa nội dung\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleEdit = (item: ContentItem) => {\n    setEditingItem(item);\n    setIsAddModalOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Bạn có chắc chắn muốn xóa nội dung này?\")) {\n      deleteContentMutation.mutate(id);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsAddModalOpen(false);\n    setEditingItem(undefined);\n    setSelectedSectionId(\"default\");\n  };\n\n  const onSubmitIntro = (data: InsertIntroSection) => {\n    saveIntroMutation.mutate(data);\n  };\n\n  const onSubmitOther = (data: InsertOtherSection) => {\n    saveOtherMutation.mutate(data);\n  };\n\n  const createSectionMutation = useMutation({\n    mutationFn: async (data: InsertCustomSection) => {\n      const response = await apiRequest(\"POST\", \"/api/sections\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Đã tạo section mới\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      setIsCreateSectionModalOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể tạo section\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateSection = (data: InsertCustomSection) => {\n    if (editingSection) {\n      updateSectionMutation.mutate({ id: editingSection.id, data });\n    } else {\n      createSectionMutation.mutate(data);\n    }\n  };\n\n  const updateSectionMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertCustomSection> }) => {\n      const response = await apiRequest(\"PUT\", `/api/sections/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Đã cập nhật section\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      setIsCreateSectionModalOpen(false);\n      setEditingSection(undefined);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể cập nhật section\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSectionMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/sections/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thành công\",\n        description: \"Đã xóa section\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể xóa section\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteSection = (id: string) => {\n    if (id === \"default\") {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể xóa section mặc định\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (confirm(\"Bạn có chắc chắn muốn xóa section này?\")) {\n      deleteSectionMutation.mutate(id);\n    }\n  };\n\n  const handleDeleteItem = async (id: string) => {\n    if (confirm(\"Bạn có chắc chắn muốn xóa item này?\")) {\n      try {\n        const response = await apiRequest(\"DELETE\", `/api/content/${id}`);\n        if (response.ok) {\n          queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n          toast({\n            title: \"Thành công\",\n            description: \"Item đã được xóa\",\n          });\n        }\n      } catch (error) {\n        toast({\n          title: \"Lỗi\",\n          description: \"Không thể xóa item\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const totalImages = contentItems.filter(item => item.type === \"image\").length;\n  const totalVideos = contentItems.filter(item => item.type === \"video\").length;\n\n  return (\n    <div className=\"pt-16 min-h-screen bg-gray-100\">\n      {/* Admin Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <h1 className=\"text-3xl font-poppins font-bold text-slate\">\n            Quản trị nội dung\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"border-l-4 border-l-coral\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Tổng nội dung</p>\n                  <p className=\"text-2xl font-bold text-slate\">{contentItems.length}</p>\n                </div>\n                <FileText className=\"text-coral\" size={24} />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border-l-4 border-l-turquoise\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Hình ảnh</p>\n                  <p className=\"text-2xl font-bold text-slate\">{totalImages}</p>\n                </div>\n                <Image className=\"text-turquoise\" size={24} />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border-l-4 border-l-sky\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Video</p>\n                  <p className=\"text-2xl font-bold text-slate\">{totalVideos}</p>\n                </div>\n                <Video className=\"text-sky\" size={24} />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"border-l-4 border-l-sunny\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Lần cập nhật cuối</p>\n                  <p className=\"text-sm font-medium text-slate\">Hôm nay</p>\n                </div>\n                <Clock className=\"text-sunny\" size={24} />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tab Navigation */}\n        <Tabs defaultValue=\"intro\" className=\"space-y-8\">\n          <TabsList className=\"bg-white p-1 h-auto rounded-xl shadow-sm\">\n            <TabsTrigger value=\"intro\" className=\"px-6 py-3 data-[state=active]:bg-coral data-[state=active]:text-white\">\n              Giới thiệu\n            </TabsTrigger>\n            <TabsTrigger value=\"sections\" className=\"px-6 py-3 data-[state=active]:bg-coral data-[state=active]:text-white\">\n              <Layers className=\"mr-2\" size={16} />\n              Sections\n            </TabsTrigger>\n            <TabsTrigger value=\"skills\" className=\"px-6 py-3 data-[state=active]:bg-coral data-[state=active]:text-white\">\n              Kỹ năng\n            </TabsTrigger>\n            <TabsTrigger value=\"other\" className=\"px-6 py-3 data-[state=active]:bg-coral data-[state=active]:text-white\">\n              Khác\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Introduction Tab */}\n          <TabsContent value=\"intro\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <form onSubmit={handleSubmitIntro(onSubmitIntro)}>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                    <div className=\"space-y-6\">\n                      <div>\n                        <Label htmlFor=\"title\">Tiêu đề</Label>\n                        <Input\n                          id=\"title\"\n                          {...registerIntro(\"title\")}\n                          className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                        />\n                        {introErrors.title && (\n                          <p className=\"text-red-500 text-sm mt-1\">{introErrors.title.message}</p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"name\">Tên</Label>\n                        <Input\n                          id=\"name\"\n                          {...registerIntro(\"name\")}\n                          className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                        />\n                        {introErrors.name && (\n                          <p className=\"text-red-500 text-sm mt-1\">{introErrors.name.message}</p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"description\">Mô tả</Label>\n                        <Textarea\n                          id=\"description\"\n                          {...registerIntro(\"description\")}\n                          rows={4}\n                          className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                        />\n                        {introErrors.description && (\n                          <p className=\"text-red-500 text-sm mt-1\">{introErrors.description.message}</p>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label>Ảnh đại diện</Label>\n                      <ObjectUploader\n                        maxNumberOfFiles={1}\n                        maxFileSize={10485760} // 10MB\n                        onGetUploadParameters={async () => {\n                          const response = await fetch('/api/objects/upload', {\n                            method: 'POST'\n                          });\n                          const data = await response.json();\n                          return {\n                            method: 'PUT' as const,\n                            url: data.uploadURL\n                          };\n                        }}\n                        onComplete={(result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n                          if (result?.successful && result.successful.length > 0) {\n                            const uploadURL = result.successful[0]?.uploadURL;\n                            \n                            // Set ACL policy for the uploaded file\n                            fetch('/api/uploaded-content', {\n                              method: 'PUT',\n                              headers: {\n                                'Content-Type': 'application/json'\n                              },\n                              body: JSON.stringify({ fileURL: uploadURL })\n                            }).then(res => res.json()).then(data => {\n                              setIntroValue(\"profileImage\", data.objectPath);\n                              toast({\n                                title: \"Thành công\",\n                                description: \"Ảnh đại diện đã được tải lên!\"\n                              });\n                            }).catch(error => {\n                              console.error('Error setting file ACL:', error);\n                              // Fallback to offline storage\n                              OfflineStorage.saveOfflineFile({\n                                url: uploadURL || '',\n                                timestamp: Date.now(),\n                                name: `profile_${Date.now()}`,\n                                type: 'profile'\n                              });\n                              setIntroValue(\"profileImage\", uploadURL || '');\n                              toast({\n                                title: \"Chế độ offline\", \n                                description: \"Ảnh đã được lưu tạm thời. Sẽ tự động đồng bộ khi có kết nối!\",\n                                variant: \"default\"\n                              });\n                            });\n                          }\n                        }}\n                        buttonClassName=\"w-full border-2 border-dashed border-gray-300 hover:border-coral transition-colors duration-300 p-8 text-center bg-transparent text-gray-500 hover:text-coral hover:bg-coral/5\"\n                      >\n                        <div className=\"flex flex-col items-center gap-2\">\n                          <Upload size={32} />\n                          <span>Thêm ảnh đại diện</span>\n                          <p className=\"text-sm text-gray-400\">PNG, JPG lên đến 10MB</p>\n                        </div>\n                      </ObjectUploader>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-end mt-8\">\n                    <Button\n                      type=\"submit\"\n                      className=\"bg-coral text-white hover:bg-turquoise transition-all duration-300 border-0\"\n                      disabled={saveIntroMutation.isPending}\n                    >\n                      <Save className=\"mr-2\" size={16} />\n                      Lưu thay đổi\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n\n\n          {/* Sections Tab */}\n          <TabsContent value=\"sections\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"mb-6 flex justify-between items-center\">\n                  <h3 className=\"text-lg font-semibold text-slate\">Quản lý Sections</h3>\n                  <Button\n                    onClick={() => setIsCreateSectionModalOpen(true)}\n                    className=\"bg-turquoise text-white hover:bg-sky transition-colors duration-300 border-0\"\n                  >\n                    <Plus className=\"mr-2\" size={16} />\n                    Tạo Section\n                  </Button>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {customSections.length > 0 ? (\n                    customSections.map((section) => (\n                      <Card key={section.id} className=\"border border-gray-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <div>\n                              <h4 className=\"text-lg font-semibold text-slate\">{section.title}</h4>\n                              {section.description && (\n                                <p className=\"text-gray-600 text-sm mt-1\">{section.description}</p>\n                              )}\n                              <div className=\"flex items-center gap-4 mt-2\">\n                                <span className=\"px-2 py-1 bg-gray-100 rounded text-xs\">\n                                  Thứ tự: {section.order}\n                                </span>\n                                <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs\">\n                                  {section.type}\n                                </span>\n                                <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n                                  {contentItems.filter(item => item.sectionId === section.id || (!item.sectionId && section.id === \"default\")).length} items\n                                </span>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingSection(section);\n                                  setIsCreateSectionModalOpen(true);\n                                }}\n                              >\n                                <Edit size={16} />\n                              </Button>\n                              {section.id !== \"default\" && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteSection(section.id)}\n                                  className=\"text-red-600 hover:text-red-700\"\n                                >\n                                  <Trash2 size={16} />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {(() => {\n                            const sectionItems = contentItems.filter(item => item.sectionId === section.id || (!item.sectionId && section.id === \"default\"));\n                            return sectionItems.length > 0 && (\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mt-4\">\n                                {sectionItems.map((item, index) => (\n                                  <div\n                                    key={item.id}\n                                    className=\"p-3 border rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors\"\n                                  >\n                                    <div className=\"flex items-center justify-between mb-2\">\n                                      <div className=\"flex items-center gap-2\">\n                                        {item.type === 'text' && <FileText size={14} className=\"text-coral\" />}\n                                        {item.type === 'image' && <Image size={14} className=\"text-turquoise\" />}\n                                        {item.type === 'video' && <Video size={14} className=\"text-sky\" />}\n                                        <h5 className=\"font-medium text-sm\">{item.title}</h5>\n                                      </div>\n                                      <div className=\"flex gap-1\">\n                                        <Button\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          onClick={() => {\n                                            setEditingItem(item);\n                                            setSelectedSectionId(section.id);\n                                            setIsAddModalOpen(true);\n                                          }}\n                                          className=\"h-6 w-6 p-0 hover:bg-blue-100\"\n                                        >\n                                          <Edit size={12} className=\"text-blue-600\" />\n                                        </Button>\n                                        <Button\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          onClick={() => handleDeleteItem(item.id)}\n                                          className=\"h-6 w-6 p-0 hover:bg-red-100\"\n                                        >\n                                          <Trash2 size={12} className=\"text-red-600\" />\n                                        </Button>\n                                      </div>\n                                    </div>\n                                    {item.excerpt && (\n                                      <p className=\"text-xs text-gray-600\">{item.excerpt}</p>\n                                    )}\n                                    <div className=\"text-xs text-gray-400 mt-1\">\n                                      {item.type}\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            );\n                          })()}\n                          \n                          <div className=\"flex justify-end mt-4\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedSectionId(section.id);\n                                setIsAddModalOpen(true);\n                              }}\n                            >\n                              <Plus className=\"mr-2\" size={14} />\n                              Thêm Item\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Layers className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                      <h3 className=\"text-lg font-medium text-gray-500 mb-2\">Chưa có section nào</h3>\n                      <p className=\"text-gray-400\">Tạo section đầu tiên để hiển thị nội dung theo chủ đề</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Skills Tab */}\n          <TabsContent value=\"skills\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"mb-6 flex justify-between items-center\">\n                  <h3 className=\"text-lg font-semibold text-slate\">Quản lý kỹ năng</h3>\n                  <Button\n                    type=\"button\"\n                    onClick={() => appendSkill({ name: \"\", description: \"\", icon: \"Code\" })}\n                    className=\"bg-turquoise text-white hover:bg-sky transition-colors duration-300 border-0\"\n                  >\n                    <Plus className=\"mr-2\" size={16} />\n                    Thêm kỹ năng\n                  </Button>\n                </div>\n\n                <form onSubmit={handleSubmitSkills((data) => saveSkillsMutation.mutate(data))}>\n                  <div className=\"space-y-6\">\n                    {skillFields.map((field, index) => (\n                      <Card key={field.id} className=\"border border-gray-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-end\">\n                            <div>\n                              <Label htmlFor={`skills.${index}.name`}>Tên kỹ năng</Label>\n                              <Input\n                                {...skillsControl.register(`skills.${index}.name`)}\n                                placeholder=\"VD: UI/UX Design\"\n                                className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                              />\n                              {skillsErrors.skills?.[index]?.name && (\n                                <p className=\"text-red-500 text-sm mt-1\">\n                                  {skillsErrors.skills[index].name?.message}\n                                </p>\n                              )}\n                            </div>\n                            \n                            <div>\n                              <Label htmlFor={`skills.${index}.description`}>Mô tả</Label>\n                              <Input\n                                {...skillsControl.register(`skills.${index}.description`)}\n                                placeholder=\"Mô tả ngắn về kỹ năng\"\n                                className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                              />\n                              {skillsErrors.skills?.[index]?.description && (\n                                <p className=\"text-red-500 text-sm mt-1\">\n                                  {skillsErrors.skills[index].description?.message}\n                                </p>\n                              )}\n                            </div>\n                            \n                            <div className=\"flex gap-2\">\n                              <div className=\"flex-1\">\n                                <Label htmlFor={`skills.${index}.icon`}>Icon</Label>\n                                <Input\n                                  {...skillsControl.register(`skills.${index}.icon`)}\n                                  placeholder=\"Code\"\n                                  className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                                />\n                                {skillsErrors.skills?.[index]?.icon && (\n                                  <p className=\"text-red-500 text-sm mt-1\">\n                                    {skillsErrors.skills[index].icon?.message}\n                                  </p>\n                                )}\n                              </div>\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => removeSkill(index)}\n                                className=\"hover:bg-red-50 hover:border-red-200 hover:text-red-600\"\n                              >\n                                <Trash2 size={16} />\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n\n                    {skillFields.length === 0 && (\n                      <div className=\"text-center py-12\">\n                        <FileText className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                        <h3 className=\"text-lg font-medium text-gray-500 mb-2\">Chưa có kỹ năng</h3>\n                        <p className=\"text-gray-400\">Thêm kỹ năng đầu tiên của bạn</p>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex justify-end mt-8\">\n                    <Button\n                      type=\"submit\"\n                      className=\"bg-coral text-white hover:bg-turquoise transition-all duration-300 border-0\"\n                      disabled={saveSkillsMutation.isPending}\n                    >\n                      <Save className=\"mr-2\" size={16} />\n                      Lưu kỹ năng\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Other Tab */}\n          <TabsContent value=\"other\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <form onSubmit={handleSubmitOther(onSubmitOther)}>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-slate mb-6\">Thông tin liên hệ</h3>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"email\">Email</Label>\n                          <Input\n                            id=\"email\"\n                            type=\"email\"\n                            {...registerOther(\"contactInfo.email\")}\n                            className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"phone\">Số điện thoại</Label>\n                          <Input\n                            id=\"phone\"\n                            type=\"tel\"\n                            {...registerOther(\"contactInfo.phone\")}\n                            className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"location\">Địa chỉ</Label>\n                          <Input\n                            id=\"location\"\n                            {...registerOther(\"contactInfo.location\")}\n                            className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-lg font-semibold text-slate mb-6\">Mạng xã hội</h3>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"facebook\">Facebook</Label>\n                          <Input\n                            id=\"facebook\"\n                            type=\"url\"\n                            placeholder=\"https://facebook.com/yourprofile\"\n                            {...registerOther(\"socialLinks.facebook\")}\n                            className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"github\">GitHub</Label>\n                          <Input\n                            id=\"github\"\n                            type=\"url\"\n                            placeholder=\"https://github.com/username\"\n                            {...registerOther(\"socialLinks.github\")}\n                            className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"zalo\">Zalo</Label>\n                          <Input\n                            id=\"zalo\"\n                            type=\"url\"\n                            placeholder=\"https://zalo.me/yourusername hoặc số điện thoại\"\n                            {...registerOther(\"socialLinks.zalo\")}\n                            className=\"focus:ring-2 focus:ring-coral focus:border-transparent\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-end mt-8\">\n                    <Button\n                      type=\"submit\"\n                      className=\"bg-coral text-white hover:bg-turquoise transition-all duration-300 border-0\"\n                      disabled={saveOtherMutation.isPending}\n                    >\n                      <Save className=\"mr-2\" size={16} />\n                      Lưu thay đổi\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <AddContentModal\n        isOpen={isAddModalOpen}\n        onClose={handleCloseModal}\n        editingItem={editingItem}\n        selectedSectionId={selectedSectionId}\n      />\n\n      <CreateSectionModal\n        isOpen={isCreateSectionModalOpen}\n        onClose={() => {\n          setIsCreateSectionModalOpen(false);\n          setEditingSection(undefined);\n        }}\n        onSubmit={handleCreateSection}\n        editingSection={editingSection}\n      />\n    </div>\n  );\n}\n","size_bytes":38853},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { User, Download, Mail, Star, Code, PaintbrushVertical, Smartphone, FileImage, MapPin, Phone, MessageCircle } from \"lucide-react\";\nimport { FaFacebook, FaGithub } from \"react-icons/fa\";\nimport { ContentCard, EmptyContentCard } from \"@/components/content-card\";\nimport type { IntroSection, ContentItem, OtherSection, CustomSection } from \"@shared/schema\";\n\nexport function HomePage() {\n  const { data: intro } = useQuery<IntroSection>({\n    queryKey: [\"/api/intro\"],\n  });\n\n  const { data: contentItems = [] } = useQuery<ContentItem[]>({\n    queryKey: [\"/api/content\"],\n  });\n\n  const { data: other } = useQuery<OtherSection>({\n    queryKey: [\"/api/other\"],\n  });\n\n  const { data: customSections = [] } = useQuery<CustomSection[]>({\n    queryKey: [\"/api/sections\"],\n  });\n\n  return (\n    <div className=\"pt-16\">\n      {/* Introduction Section */}\n      <section id=\"intro\" className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n        <div className=\"gradient-bg absolute inset-0 opacity-10\"></div>\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-20 relative\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"animate-fade-in-up\">\n              <h1 className=\"text-5xl md:text-6xl font-poppins font-bold text-slate mb-6 leading-tight animate-slide-in-left\">\n                <span>{intro?.title || \"Xin chào, tôi là\"}</span>\n                <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-coral to-turquoise block animate-slide-in-right\" style={{animationDelay: '0.3s'}}>\n                  {intro?.name || \"Creative Designer\"}\n                </span>\n              </h1>\n              <p className=\"text-xl text-gray-600 mb-8 leading-relaxed animate-fade-in-up\" style={{animationDelay: '0.6s'}}>\n                {intro?.description || \"Tôi tạo ra những trải nghiệm số đẹp và có ý nghĩa thông qua thiết kế sáng tạo và công nghệ hiện đại.\"}\n              </p>\n              <div className=\"flex flex-wrap gap-4 animate-fade-in-up\" style={{animationDelay: '0.9s'}}>\n                <Button \n                  onClick={async () => {\n                    try {\n                      // Fetch thông tin từ API để tạo CV động\n                      const [introRes, otherRes] = await Promise.all([\n                        fetch('/api/intro'),\n                        fetch('/api/other')\n                      ]);\n                      \n                      const intro = await introRes.json();\n                      const other = await otherRes.json();\n                      \n                      // Tạo CV text từ data thực\n                      const cvContent = `\nCURRICULUM VITAE\n\nHọ và tên: ${intro?.name || 'Creative Designer'}\nEmail: ${other?.contactInfo?.email || 'hello@portfolio.com'}  \nĐiện thoại: ${other?.contactInfo?.phone || '+84 123 456 789'}\nĐịa chỉ: ${other?.contactInfo?.location || 'Hà Nội, Việt Nam'}\n\n=== GIỚI THIỆU ===\n\n${intro?.description || 'Tôi tạo ra những trải nghiệm số đẹp và có ý nghĩa thông qua thiết kế sáng tạo và công nghệ hiện đại.'}\n\n=== KỸ NĂNG CHUYÊN MÔN ===\n\n${other?.skills?.map((skill: any) => `• ${skill.name}: ${skill.description}`).join('\\n') || \n'• UI/UX Design: Thiết kế giao diện người dùng sáng tạo\\n• Frontend: Phát triển giao diện web hiện đại\\n• Mobile Design: Thiết kế ứng dụng di động'}\n\n=== THÔNG TIN LIÊN HỆ ===\n\n${other?.socialLinks?.github ? `GitHub: ${other.socialLinks.github}` : ''}\n${other?.socialLinks?.facebook ? `Facebook: ${other.socialLinks.facebook}` : ''}\n${other?.socialLinks?.zalo ? `Zalo: ${other.socialLinks.zalo}` : ''}\n\n=== DỰ ÁN PORTFOLIO ===\n\nTruy cập portfolio đầy đủ tại: ${window.location.origin}\n\nCập nhật: ${new Date().toLocaleDateString('vi-VN')}\n                      `.trim();\n\n                      const blob = new Blob([cvContent], { type: 'text/plain;charset=utf-8' });\n                      const url = window.URL.createObjectURL(blob);\n                      const link = document.createElement('a');\n                      link.href = url;\n                      link.download = `CV-${intro?.name?.replace(/\\s+/g, '-') || 'Portfolio'}.txt`;\n                      document.body.appendChild(link);\n                      link.click();\n                      document.body.removeChild(link);\n                      window.URL.revokeObjectURL(url);\n                    } catch (error) {\n                      console.error('Error downloading CV:', error);\n                      // Fallback với nội dung cơ bản\n                      const fallbackContent = `\nCURRICULUM VITAE\n\nHọ và tên: Creative Designer\nEmail: hello@portfolio.com\nĐiện thoại: +84 123 456 789\nWebsite: ${window.location.origin}\n\nVui lòng truy cập website để xem portfolio đầy đủ.\n                      `.trim();\n                      \n                      const blob = new Blob([fallbackContent], { type: 'text/plain;charset=utf-8' });\n                      const url = window.URL.createObjectURL(blob);\n                      const link = document.createElement('a');\n                      link.href = url;\n                      link.download = 'CV-Portfolio.txt';\n                      document.body.appendChild(link);\n                      link.click();\n                      document.body.removeChild(link);\n                      window.URL.revokeObjectURL(url);\n                    }\n                  }}\n                  className=\"bg-coral text-white hover:bg-turquoise btn-hover-lift shadow-lg hover:shadow-xl border-0\"\n                >\n                  <Download className=\"mr-2\" size={16} />\n                  Tải CV\n                </Button>\n                <Button \n                  onClick={() => {\n                    // Scroll đến phần liên hệ\n                    const contactSection = document.getElementById('other');\n                    if (contactSection) {\n                      contactSection.scrollIntoView({ behavior: 'smooth' });\n                    } else {\n                      // Fallback: mở email client\n                      window.location.href = 'mailto:hello@portfolio.com?subject=Liên hệ từ Portfolio&body=Xin chào, tôi muốn liên hệ với bạn...';\n                    }\n                  }}\n                  variant=\"outline\" \n                  className=\"border-2 border-turquoise text-turquoise hover:bg-turquoise hover:text-white btn-hover-lift border-0\"\n                >\n                  <Mail className=\"mr-2\" size={16} />\n                  Liên hệ\n                </Button>\n              </div>\n            </div>\n            <div className=\"flex justify-center lg:justify-end animate-scale-in\" style={{animationDelay: '0.4s'}}>\n              <div className=\"relative\">\n                <div className=\"w-80 h-80 rounded-full bg-gradient-to-br from-coral via-turquoise to-sky p-1 animate-pulse-custom card-hover\">\n                  <div className=\"w-full h-full rounded-full bg-white flex items-center justify-center\">\n                    {intro?.profileImage ? (\n                      <img \n                        src={intro.profileImage} \n                        alt=\"Profile\" \n                        className=\"w-72 h-72 rounded-full object-cover hover:scale-105 transition-transform duration-300\"\n                      />\n                    ) : (\n                      <div className=\"w-72 h-72 rounded-full bg-gray-200 flex items-center justify-center text-gray-500 hover:bg-gray-300 transition-colors duration-300\">\n                        <User size={80} />\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"absolute -top-4 -right-4 w-20 h-20 bg-sunny rounded-full flex items-center justify-center animate-bounce-custom btn-hover-scale\" style={{animationDelay: '1.2s'}}>\n                  <Star className=\"text-white\" size={20} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* All Sections */}\n      {customSections.map((section, sectionIndex) => {\n        // Get items for this section\n        const sectionItems = contentItems.filter(item => item.sectionId === section.id || (!item.sectionId && section.id === \"default\"));\n        \n        return (\n          <section \n            key={section.id} \n            id={`section-${section.id}`}\n            className={`py-20 relative overflow-hidden ${\n              sectionIndex % 2 === 0 \n                ? 'bg-gradient-to-br from-gray-50 to-white' \n                : 'bg-gradient-to-br from-slate-100 via-gray-50 to-white'\n            }`}\n          >\n            {/* Background Decorative Elements */}\n            <div className=\"absolute inset-0 opacity-20\">\n              <div className={`absolute top-10 ${sectionIndex % 2 === 0 ? 'left-10' : 'right-10'} w-32 h-32 bg-coral/20 rounded-full blur-2xl animate-pulse-custom`}></div>\n              <div className={`absolute bottom-10 ${sectionIndex % 2 === 0 ? 'right-10' : 'left-10'} w-40 h-40 bg-turquoise/20 rounded-full blur-2xl`} style={{animationDelay: '2s'}}></div>\n            </div>\n\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n            <div className=\"text-center mb-16 animate-fade-in-up\">\n              <h2 className=\"text-4xl font-poppins font-bold text-slate mb-6 relative\">\n                {section.title}\n                <div className=\"w-24 h-1 bg-gradient-to-r from-coral to-turquoise mx-auto mt-4 rounded-full\"></div>\n              </h2>\n              {section.description && (\n                <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n                  {section.description}\n                </p>\n              )}\n            </div>\n\n            {section.type === 'grid' && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {sectionItems.length > 0 ? (\n                  sectionItems.map((item, itemIndex) => (\n                    <div key={item.id} className=\"animate-fade-in-up\" style={{animationDelay: `${itemIndex * 0.1}s`}}>\n                      <ContentCard item={item} />\n                    </div>\n                  ))\n                ) : (\n                  <>\n                    <div className=\"animate-fade-in-up\" style={{animationDelay: '0.1s'}}>\n                      <EmptyContentCard />\n                    </div>\n                    <div className=\"animate-fade-in-up\" style={{animationDelay: '0.2s'}}>\n                      <EmptyContentCard />\n                    </div>\n                    <div className=\"animate-fade-in-up\" style={{animationDelay: '0.3s'}}>\n                      <EmptyContentCard />\n                    </div>\n                  </>\n                )}\n              </div>\n            )}\n\n            {section.type === 'list' && (\n              <div className=\"space-y-6\">\n                {sectionItems.length > 0 ? (\n                  sectionItems.map((item, itemIndex) => (\n                    <div key={item.id} className=\"animate-slide-in-left\" style={{animationDelay: `${itemIndex * 0.1}s`}}>\n                      <Card className=\"bg-white rounded-2xl shadow-lg card-hover\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start gap-4\">\n                            {item.type === 'text' && <FileImage className=\"text-coral mt-1\" size={24} />}\n                            {item.type === 'image' && <FileImage className=\"text-turquoise mt-1\" size={24} />}\n                            {item.type === 'video' && <FileImage className=\"text-sky mt-1\" size={24} />}\n                            <div className=\"flex-1\">\n                              <h3 className=\"text-xl font-poppins font-semibold text-slate mb-2\">{item.title}</h3>\n                              {item.excerpt && (\n                                <p className=\"text-gray-600 mb-4\">{item.excerpt}</p>\n                              )}\n                              {item.type === \"image\" && item.mediaUrl && (\n                                <div className=\"mb-4\">\n                                  <img\n                                    src={item.mediaUrl}\n                                    alt={item.title}\n                                    className=\"w-full h-48 object-cover rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300\"\n                                  />\n                                </div>\n                              )}\n                              {item.type === \"video\" && item.mediaUrl && (\n                                <div className=\"mb-4\">\n                                  {item.mediaUrl.includes('youtube.com') || item.mediaUrl.includes('youtu.be') ? (\n                                    <div className=\"aspect-w-16 aspect-h-9\">\n                                      <iframe\n                                        src={item.mediaUrl.replace('watch?v=', 'embed/')}\n                                        className=\"w-full h-48 rounded-lg\"\n                                        allowFullScreen\n                                      />\n                                    </div>\n                                  ) : (\n                                    <video\n                                      src={item.mediaUrl}\n                                      controls\n                                      className=\"w-full h-48 object-cover rounded-lg shadow-md\"\n                                    />\n                                  )}\n                                </div>\n                              )}\n                              {item.content && (\n                                <p className=\"text-gray-700\">{item.content}</p>\n                              )}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-12 animate-fade-in-up\">\n                    <FileImage className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                    <h3 className=\"text-lg font-medium text-gray-500 mb-2\">Chưa khả dụng</h3>\n                    <p className=\"text-gray-400\">Nội dung sẽ được thêm vào sau</p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {section.type === 'cards' && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {sectionItems.length > 0 ? (\n                  sectionItems.map((item, itemIndex) => (\n                    <div key={item.id} className=\"animate-scale-in\" style={{animationDelay: `${itemIndex * 0.2}s`}}>\n                      <Card className=\"bg-white rounded-2xl shadow-lg card-hover\">\n                        <CardContent className=\"p-8\">\n                          <div className=\"text-center\">\n                            {item.type === 'text' && <FileImage className=\"mx-auto text-coral mb-4 animate-pulse-custom\" size={32} />}\n                            {item.type === 'image' && <FileImage className=\"mx-auto text-turquoise mb-4 animate-pulse-custom\" size={32} />}\n                            {item.type === 'video' && <FileImage className=\"mx-auto text-sky mb-4 animate-pulse-custom\" size={32} />}\n                            <h3 className=\"text-xl font-poppins font-semibold text-slate mb-4\">{item.title}</h3>\n                            {item.excerpt && (\n                              <p className=\"text-gray-600 mb-4\">{item.excerpt}</p>\n                            )}\n                            {item.type === \"image\" && item.mediaUrl && (\n                              <div className=\"mb-4\">\n                                <img\n                                  src={item.mediaUrl}\n                                  alt={item.title}\n                                  className=\"w-full h-48 object-cover rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300\"\n                                />\n                              </div>\n                            )}\n                            {item.type === \"video\" && item.mediaUrl && (\n                              <div className=\"mb-4\">\n                                {item.mediaUrl.includes('youtube.com') || item.mediaUrl.includes('youtu.be') ? (\n                                  <div className=\"aspect-w-16 aspect-h-9\">\n                                    <iframe\n                                      src={item.mediaUrl.replace('watch?v=', 'embed/')}\n                                      className=\"w-full h-48 rounded-lg\"\n                                      allowFullScreen\n                                    />\n                                  </div>\n                                ) : (\n                                  <video\n                                    src={item.mediaUrl}\n                                    controls\n                                    className=\"w-full h-48 object-cover rounded-lg shadow-md\"\n                                  />\n                                )}\n                              </div>\n                            )}\n                            {item.content && (\n                              <p className=\"text-gray-700\">{item.content}</p>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div className=\"animate-scale-in\" style={{animationDelay: '0.1s'}}>\n                      <Card className=\"bg-white rounded-2xl shadow-lg card-hover\">\n                        <CardContent className=\"p-8 text-center\">\n                          <FileImage className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                          <h3 className=\"text-lg font-medium text-gray-500 mb-2\">Chưa khả dụng</h3>\n                          <p className=\"text-gray-400\">Nội dung sẽ được thêm vào sau</p>\n                        </CardContent>\n                      </Card>\n                    </div>\n                    <div className=\"animate-scale-in\" style={{animationDelay: '0.3s'}}>\n                      <Card className=\"bg-white rounded-2xl shadow-lg card-hover\">\n                        <CardContent className=\"p-8 text-center\">\n                          <FileImage className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                          <h3 className=\"text-lg font-medium text-gray-500 mb-2\">Chưa khả dụng</h3>\n                          <p className=\"text-gray-400\">Nội dung sẽ được thêm vào sau</p>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </section>\n        );\n      })}\n\n      {/* Skills & Contact Section */}\n      <section id=\"other\" className=\"py-20 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden\">\n        {/* Background Effects */}\n        <div className=\"absolute inset-0 opacity-30\">\n          <div className=\"absolute top-20 left-10 w-72 h-72 bg-coral/20 rounded-full blur-3xl animate-pulse-custom\"></div>\n          <div className=\"absolute bottom-20 right-10 w-96 h-96 bg-turquoise/20 rounded-full blur-3xl animate-bounce-custom\"></div>\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-sky/10 rounded-full blur-3xl\"></div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center mb-16 animate-fade-in-up\">\n            <h2 className=\"text-4xl font-poppins font-bold text-slate mb-6 relative\">\n              Kỹ năng & Liên hệ\n              <div className=\"w-24 h-1 bg-gradient-to-r from-coral to-turquoise mx-auto mt-4 rounded-full\"></div>\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Khám phá những kỹ năng của tôi và cách thức liên hệ\n            </p>\n          </div>\n\n          {/* Skills Section */}\n          <div className=\"mb-20 animate-slide-in-left\">\n            <div className=\"text-center mb-12\">\n              <h3 className=\"text-3xl font-poppins font-bold text-slate mb-4 flex items-center justify-center\">\n                <Code className=\"text-coral mr-3 animate-pulse-custom\" size={32} />\n                Kỹ năng chuyên môn\n              </h3>\n              <div className=\"w-24 h-1 bg-gradient-to-r from-coral to-turquoise mx-auto rounded-full\"></div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {other?.skills && other.skills.length > 0 ? (\n                other.skills.map((skill, index) => (\n                  <div \n                    key={index} \n                    className={`group relative bg-white/80 backdrop-blur-sm border border-gray-200 rounded-2xl p-6 text-center btn-hover-scale animate-fade-in-up transition-all duration-500 hover:bg-white hover:scale-105 shadow-lg`}\n                    style={{animationDelay: `${index * 0.15}s`}}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-coral/10 via-turquoise/10 to-sky/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"w-16 h-16 mx-auto mb-4 bg-coral rounded-2xl flex items-center justify-center group-hover:rotate-12 transition-transform duration-500\">\n                        {skill.icon === 'PaintbrushVertical' && <PaintbrushVertical className=\"text-white\" size={28} />}\n                        {skill.icon === 'Code' && <Code className=\"text-white\" size={28} />}\n                        {skill.icon === 'Smartphone' && <Smartphone className=\"text-white\" size={28} />}\n                        {skill.icon === 'FileImage' && <FileImage className=\"text-white\" size={28} />}\n                      </div>\n                      <h4 className=\"text-lg font-semibold text-slate mb-2 group-hover:text-coral transition-colors duration-300\">\n                        {skill.name}\n                      </h4>\n                      {skill.description && (\n                        <p className=\"text-sm text-gray-600 group-hover:text-gray-800 transition-colors duration-300\">\n                          {skill.description}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <>\n                  <div className=\"group relative bg-white/10 backdrop-blur-sm border border-white/20 rounded-2xl p-6 text-center btn-hover-scale animate-fade-in-up transition-all duration-500 hover:bg-white/20\" style={{animationDelay: '0.1s'}}>\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-coral/20 to-turquoise/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"w-16 h-16 mx-auto mb-4 bg-coral rounded-2xl flex items-center justify-center group-hover:rotate-12 transition-transform duration-500\">\n                        <PaintbrushVertical className=\"text-white\" size={28} />\n                      </div>\n                      <h4 className=\"text-lg font-semibold text-white mb-2\">UI/UX Design</h4>\n                      <p className=\"text-sm text-gray-300\">Thiết kế giao diện</p>\n                    </div>\n                  </div>\n                  <div className=\"group relative bg-white/10 backdrop-blur-sm border border-white/20 rounded-2xl p-6 text-center btn-hover-scale animate-fade-in-up transition-all duration-500 hover:bg-white/20\" style={{animationDelay: '0.2s'}}>\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-turquoise/20 to-sky/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"w-16 h-16 mx-auto mb-4 bg-turquoise rounded-2xl flex items-center justify-center group-hover:rotate-12 transition-transform duration-500\">\n                        <Code className=\"text-white\" size={28} />\n                      </div>\n                      <h4 className=\"text-lg font-semibold text-white mb-2\">Frontend</h4>\n                      <p className=\"text-sm text-gray-300\">Phát triển web</p>\n                    </div>\n                  </div>\n                  <div className=\"group relative bg-white/10 backdrop-blur-sm border border-white/20 rounded-2xl p-6 text-center btn-hover-scale animate-fade-in-up transition-all duration-500 hover:bg-white/20\" style={{animationDelay: '0.3s'}}>\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-sky/20 to-sunny/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"w-16 h-16 mx-auto mb-4 bg-sky rounded-2xl flex items-center justify-center group-hover:rotate-12 transition-transform duration-500\">\n                        <Smartphone className=\"text-white\" size={28} />\n                      </div>\n                      <h4 className=\"text-lg font-semibold text-white mb-2\">Mobile Design</h4>\n                      <p className=\"text-sm text-gray-300\">Ứng dụng di động</p>\n                    </div>\n                  </div>\n                  <div className=\"group relative bg-white/10 backdrop-blur-sm border border-white/20 rounded-2xl p-6 text-center btn-hover-scale animate-fade-in-up transition-all duration-500 hover:bg-white/20\" style={{animationDelay: '0.4s'}}>\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-sunny/20 to-coral/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                    <div className=\"relative z-10\">\n                      <div className=\"w-16 h-16 mx-auto mb-4 bg-sunny rounded-2xl flex items-center justify-center group-hover:rotate-12 transition-transform duration-500\">\n                        <FileImage className=\"text-white\" size={28} />\n                      </div>\n                      <h4 className=\"text-lg font-semibold text-white mb-2\">Content</h4>\n                      <p className=\"text-sm text-gray-300\">Sáng tạo nội dung</p>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* Contact Section */}\n          <div className=\"animate-slide-in-right\">\n            <div className=\"text-center mb-12\">\n              <h3 className=\"text-3xl font-poppins font-bold text-slate mb-4 flex items-center justify-center\">\n                <Mail className=\"text-turquoise mr-3 animate-pulse-custom\" size={32} />\n                Thông tin liên hệ\n              </h3>\n              <div className=\"w-24 h-1 bg-gradient-to-r from-turquoise to-sky mx-auto rounded-full\"></div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12\">\n              <div className=\"group bg-white/80 backdrop-blur-sm border border-gray-200 rounded-2xl p-6 text-center btn-hover-lift animate-fade-in-up transition-all duration-500 hover:bg-white shadow-lg\" style={{animationDelay: '0.1s'}}>\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-coral rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-500\">\n                  <Mail className=\"text-white\" size={28} />\n                </div>\n                <h4 className=\"text-lg font-semibold text-slate mb-2\">Email</h4>\n                <p className=\"text-gray-600 group-hover:text-gray-800 transition-colors duration-300\">\n                  {other?.contactInfo?.email || \"hello@portfolio.com\"}\n                </p>\n              </div>\n\n              <div className=\"group bg-white/80 backdrop-blur-sm border border-gray-200 rounded-2xl p-6 text-center btn-hover-lift animate-fade-in-up transition-all duration-500 hover:bg-white shadow-lg\" style={{animationDelay: '0.2s'}}>\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-turquoise rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-500\">\n                  <Phone className=\"text-white\" size={28} />\n                </div>\n                <h4 className=\"text-lg font-semibold text-slate mb-2\">Điện thoại</h4>\n                <p className=\"text-gray-600 group-hover:text-gray-800 transition-colors duration-300\">\n                  {other?.contactInfo?.phone || \"+84 123 456 789\"}\n                </p>\n              </div>\n\n              <div className=\"group bg-white/80 backdrop-blur-sm border border-gray-200 rounded-2xl p-6 text-center btn-hover-lift animate-fade-in-up transition-all duration-500 hover:bg-white shadow-lg\" style={{animationDelay: '0.3s'}}>\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-sky rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-500\">\n                  <MapPin className=\"text-white\" size={28} />\n                </div>\n                <h4 className=\"text-lg font-semibold text-slate mb-2\">Địa chỉ</h4>\n                <p className=\"text-gray-600 group-hover:text-gray-800 transition-colors duration-300\">\n                  {other?.contactInfo?.location || \"Hà Nội, Việt Nam\"}\n                </p>\n              </div>\n            </div>\n\n            {/* Social Media */}\n            <div className=\"text-center\">\n              <h4 className=\"text-xl font-semibold text-slate mb-6\">Kết nối với tôi</h4>\n              <div className=\"flex justify-center space-x-6\">\n                {other?.socialLinks?.facebook && (\n                  <a \n                    href={other.socialLinks.facebook}\n                    className=\"group w-16 h-16 bg-blue-600 text-white rounded-2xl flex items-center justify-center btn-hover-scale animate-bounce-custom shadow-2xl hover:bg-blue-700 transition-all duration-500\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{animationDelay: '0.5s'}}\n                  >\n                    <FaFacebook size={24} className=\"group-hover:scale-125 transition-transform duration-300\" />\n                  </a>\n                )}\n                {other?.socialLinks?.github && (\n                  <a \n                    href={other.socialLinks.github}\n                    className=\"group w-16 h-16 bg-gray-800 text-white rounded-2xl flex items-center justify-center btn-hover-scale animate-bounce-custom shadow-2xl hover:bg-gray-900 transition-all duration-500\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{animationDelay: '0.6s'}}\n                  >\n                    <FaGithub size={24} className=\"group-hover:scale-125 transition-transform duration-300\" />\n                  </a>\n                )}\n                {other?.socialLinks?.zalo && (\n                  <a \n                    href={other.socialLinks.zalo}\n                    className=\"group w-16 h-16 bg-blue-500 text-white rounded-2xl flex items-center justify-center btn-hover-scale animate-bounce-custom shadow-2xl hover:bg-blue-600 transition-all duration-500\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{animationDelay: '0.7s'}}\n                  >\n                    <MessageCircle size={24} className=\"group-hover:scale-125 transition-transform duration-300\" />\n                  </a>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":32393},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2866},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n// For now, we'll define ACL types inline since we don't need complex ACL for this project\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\n// Simple ACL functions for our use case\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      \"custom:aclPolicy\": JSON.stringify(aclPolicy),\n    },\n  });\n}\n\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[\"custom:aclPolicy\"];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  return false;\n}\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":9908},"client/src/lib/offlineStorage.ts":{"content":"// Offline storage utilities for better offline functionality\n\ninterface OfflineFile {\n  url: string;\n  timestamp: number;\n  name: string;\n  type: 'profile' | 'content';\n  id?: string;\n}\n\nexport class OfflineStorage {\n  private static readonly STORAGE_KEY = 'portfolio_offline_files';\n  private static readonly MAX_FILES = 10; // Limit offline files to prevent storage bloat\n\n  static saveOfflineFile(file: OfflineFile): void {\n    try {\n      const existingFiles = this.getOfflineFiles();\n      \n      // Remove oldest files if we exceed limit\n      if (existingFiles.length >= this.MAX_FILES) {\n        existingFiles.sort((a, b) => a.timestamp - b.timestamp);\n        existingFiles.splice(0, existingFiles.length - this.MAX_FILES + 1);\n      }\n      \n      existingFiles.push(file);\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(existingFiles));\n    } catch (error) {\n      console.warn('Failed to save offline file:', error);\n    }\n  }\n\n  static getOfflineFiles(): OfflineFile[] {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.warn('Failed to retrieve offline files:', error);\n      return [];\n    }\n  }\n\n  static removeOfflineFile(name: string): void {\n    try {\n      const files = this.getOfflineFiles().filter(f => f.name !== name);\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(files));\n    } catch (error) {\n      console.warn('Failed to remove offline file:', error);\n    }\n  }\n\n  static syncOfflineFiles(): Promise<void> {\n    // This would be implemented to sync offline files when connection is restored\n    return Promise.resolve();\n  }\n\n  static isOffline(): boolean {\n    return !navigator.onLine;\n  }\n\n  static addNetworkListener(callback: (isOnline: boolean) => void): (() => void) {\n    const handleOnline = () => callback(true);\n    const handleOffline = () => callback(false);\n    \n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    // Return cleanup function\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }\n}","size_bytes":2232}}}